{-# OPTIONS --safe --no-exact-split #-}
module Cat.Functor.Base where

open import Meta.Prelude
  hiding (id ; _‚àò_)
open import Meta.Deriving.HLevel
open import Meta.Record

open import Structures.n-Type

open import Cat.Base

open import Data.Truncation.Propositional.Base

private variable
  o h o‚Ä≤ h‚Ä≤ o·∂ú h·∂ú o·µà h·µà o·µâ h·µâ : Level
  C : Precategory o·∂ú h·µà
  D : Precategory o·µà h·µà

record Functor
    (C : Precategory o·∂ú h·∂ú) (D : Precategory o·µà h·µà)
  : Type (o·∂ú ‚äî h·∂ú ‚äî o·µà ‚äî h·µà) where
  no-eta-equality

  private
    module C = Precategory C
    module D = Precategory D

  field
    F‚ÇÄ : C.Ob ‚Üí D.Ob
    F‚ÇÅ : ‚àÄ {x y : C.Ob} ‚Üí x ‚áí y ‚Üí F‚ÇÄ x ‚áí F‚ÇÄ y
    F-id : ‚àÄ {x} ‚Üí F‚ÇÅ (C.id {x}) Ôºù D.id
    F-‚àò : ‚àÄ {x y z : C.Ob} (f : y ‚áí z) (g : x ‚áí y)
        ‚Üí F‚ÇÅ (g ‚àô f) Ôºù F‚ÇÅ g ‚àô F‚ÇÅ f

unquoteDecl functor-iso = declare-record-iso functor-iso (quote Functor)

instance
  ‚áí-Precat : ‚áí-notation (Precategory o h) (Precategory o‚Ä≤ h‚Ä≤) (Type (o ‚äî h ‚äî o‚Ä≤ ‚äî h‚Ä≤))
  ‚áí-Precat .‚áí-notation.Constraint _ _ = ‚ä§‚Çú
  ‚áí-Precat ._‚áí_ C D = Functor C D

  Dual-Functor : Dual {A = Precategory o·∂ú h·∂ú} {B = Precategory o·µà h·µà} Functor Œª D C ‚Üí Functor (C ·µí·µñ) (D ·µí·µñ)
  Dual-Functor ._·µí·µñ F .Functor.F‚ÇÄ = F .Functor.F‚ÇÄ
  Dual-Functor ._·µí·µñ F .Functor.F‚ÇÅ = F .Functor.F‚ÇÅ
  Dual-Functor ._·µí·µñ F .Functor.F-id = F .Functor.F-id
  Dual-Functor ._·µí·µñ F .Functor.F-‚àò f g = F .Functor.F-‚àò g f

  Dual-Functor‚Åª : Dual {A = Precategory o·∂ú h·∂ú} {B = Precategory o·µà h·µà} (Œª D C ‚Üí Functor (C ·µí·µñ) (D ·µí·µñ)) Functor
  Dual-Functor‚Åª ._·µí·µñ F = Dual-Functor ._·µí·µñ F
  {-# INCOHERENT Dual-Functor‚Åª #-}

  Funlike-Functor‚ÇÄ : Funlike ur (Functor C D) ‚åû C ‚åü (Œª _ ‚Üí ‚åû D ‚åü)
  Funlike-Functor‚ÇÄ  ._#_ = Functor.F‚ÇÄ

  Funlike-Functor‚ÇÅ
    : {x y : ‚åû C ‚åü}
    ‚Üí Funlike ur (Functor C D) (Precategory.Hom C x y) Œª (F , _) ‚Üí Precategory.Hom D (F # x) (F # y)
  Funlike-Functor‚ÇÅ ._#_ F = F .Functor.F‚ÇÅ

  GInvol-Dual-Functor : GInvol {A = Precategory o·∂ú h·∂ú} {B = Precategory o·µà h·µà} Functor (Œª D‚Ä≤ C‚Ä≤ ‚Üí Functor (C‚Ä≤ ·µí·µñ) (D‚Ä≤ ·µí·µñ))
  GInvol-Dual-Functor .invol F _ .Functor.F‚ÇÄ = F .Functor.F‚ÇÄ
  GInvol-Dual-Functor .invol F _ .Functor.F‚ÇÅ = F .Functor.F‚ÇÅ
  GInvol-Dual-Functor .invol F _ .Functor.F-id = F .Functor.F-id
  GInvol-Dual-Functor .invol F _ .Functor.F-‚àò = F .Functor.F-‚àò

_‚àò·∂†_ : {C : Precategory o·∂ú h·∂ú} {D : Precategory o·µà h·µà} {E : Precategory o·µâ h·µâ}
     ‚Üí D ‚áí E ‚Üí C ‚áí D ‚Üí C ‚áí E
_‚àò·∂†_ {C} {D} {E} F G = comps
  module F‚àò where
    module C = Precategory C
    module D = Precategory D
    module E = Precategory E

    module F = Functor F
    module G = Functor G

    F‚ÇÄ : C.Ob ‚Üí E.Ob
    F‚ÇÄ x = F $ G $ x

    F‚ÇÅ : {x y : C.Ob} ‚Üí x ‚áí y ‚Üí F‚ÇÄ x ‚áí F‚ÇÄ y
    F‚ÇÅ f = F $ G $ f

    opaque
      F-id : {x : C.Ob} ‚Üí F‚ÇÅ (C.id {x}) Ôºù E.id {F‚ÇÄ x}
      F-id =
          F # (G # C.id)  ~‚ü® ap$ F G.F-id ‚ü©
          F # D.id        ~‚ü® F.F-id ‚ü©
          E.id            ‚àé

      F-‚àò : {x y z : C.Ob} (f : y ‚áí z) (g : x ‚áí y)
          ‚Üí F‚ÇÅ (g ‚àô f) Ôºù F‚ÇÅ g ‚àô F‚ÇÅ f
      F-‚àò f g =
        F # (G # (g ‚àô f))           ~‚ü® ap$ F (G.F-‚àò f g) ‚ü©
        F # (G # g ‚àô G # f)         ~‚ü® F.F-‚àò (G.F‚ÇÅ f) (G.F‚ÇÅ g) ‚ü©
        F.F‚ÇÅ (G # g) ‚àô F # (G # f)  ‚àé

    comps : Functor _ _
    comps .Functor.F‚ÇÄ = F‚ÇÄ
    comps .Functor.F‚ÇÅ = F‚ÇÅ
    comps .Functor.F-id = F-id
    comps .Functor.F-‚àò = F-‚àò

{-# DISPLAY F‚àò.comps F G = F ‚àò·∂† G #-}

open Functor

Id : C ‚áí C
Id .F‚ÇÄ = refl
Id .F‚ÇÅ = refl
Id .F-id = refl
Id .F-‚àò _ _ = refl

Const : ‚åû D ‚åü ‚Üí C ‚áí D
Const {D} x .F‚ÇÄ _ = x
Const {D} x .F‚ÇÅ _ = Precategory.id D
Const {D} x .F-id = refl
Const {D} x .F-‚àò _ _ = Precategory.id-l D _ ‚Åª¬π

instance
  Refl-Functor : Refl (Functor {o·∂ú} {h·∂ú})
  Refl-Functor .refl = Id

  Comp-Functor : Comp (Functor {o·∂ú} {h·∂ú}) (Functor {o·µà} {h·µà} {o·µâ} {h·µâ}) Functor
  Comp-Functor ._‚àô_ F G = G ‚àò·∂† F

  ‚âÖ-Cat : ‚âÖ-notation (Precategory o h) (Precategory o‚Ä≤ h‚Ä≤) (ùí∞ (o ‚äî h ‚äî o‚Ä≤ ‚äî h‚Ä≤))
  ‚âÖ-Cat ._‚âÖ_ = Iso Functor Functor

  -- XXX FIXME
  -- GAssoc-Functor
  --   : GAssoc {A = Precategory o h} {B = Precategory o‚Ä≤ h‚Ä≤}
  --            {C = Precategory o·∂ú h·∂ú} {D = Precategory o·µà h·µà}
  --            Functor Functor Functor Functor Functor Functor
  -- GAssoc-Functor .‚àô-assoc F G H = Equiv.injective (‚âÖ‚Üí‚âÉ functor-iso) (refl ,‚Çö refl ,‚Çö prop!)

  -- GUnit-o-Functor : GUnit-o {A = Precategory o h} {B = Precategory o‚Ä≤ h‚Ä≤} Functor Functor
  -- GUnit-o-Functor .‚àô-id-o F = Equiv.injective (‚âÖ‚Üí‚âÉ functor-iso) (refl ,‚Çö refl ,‚Çö prop!)

  -- GUnit-i-Functor : GUnit-i {A = Precategory o h} {B = Precategory o‚Ä≤ h‚Ä≤} Functor Functor
  -- GUnit-i-Functor .‚àô-id-i F = Equiv.injective (‚âÖ‚Üí‚âÉ functor-iso) (refl ,‚Çö refl ,‚Çö prop!)
