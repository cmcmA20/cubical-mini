{-# OPTIONS --safe #-}
module Algebra.Monoid.Commutative.Category where

open import Algebra.Monoid.Category using (Monoid-structure; Monoids)
open import Algebra.Monoid.Commutative

open import Categories.Displayed.Univalence.Thin
open import Categories.Prelude
import Categories.Morphism

open Monoid-hom
open CMonoid-on

CMonoid-structure : ‚àÄ ‚Ñì ‚Üí Thin-structure ‚Ñì CMonoid-on
CMonoid-structure ‚Ñì = Full-substructure ‚Ñì CMonoid-on Monoid-on
  (Œª _ ‚Üí comm-monoid-on‚Ü™monoid-on) (Monoid-structure ‚Ñì)

CMonoids : ‚àÄ ‚Ñì ‚Üí Precategory (‚Ñìsuc ‚Ñì) ‚Ñì
CMonoids ‚Ñì = Structured-objects (CMonoid-structure ‚Ñì)

module CMonoids {‚Ñì} = Categories.Morphism (CMonoids ‚Ñì)

CMonoid : ‚àÄ ‚Ñì ‚Üí ùí∞ (‚Ñìsuc ‚Ñì)
CMonoid ‚Ñì = Precategory.Ob (CMonoids ‚Ñì)

private variable ‚Ñì : Level

instance
  CMonoids-equational : is-equational (CMonoid-structure ‚Ñì)
  CMonoids-equational .invert-id-hom p .pres-id = sym (p .pres-id)
  CMonoids-equational .invert-id-hom p .pres-‚ãÜ _ _ = sym (p .pres-‚ãÜ _ _)

Forget : Functor (CMonoids ‚Ñì) (Sets ‚Ñì)
Forget = Forget-structure (CMonoid-structure _)

Forget-comm : Functor (CMonoids ‚Ñì) (Monoids ‚Ñì)
Forget-comm .Functor.F‚ÇÄ = second (comm-monoid-on‚Ü™monoid-on #_)
Forget-comm .Functor.F‚ÇÅ f .hom x = f # x
Forget-comm .Functor.F‚ÇÅ f .preserves = f .preserves
Forget-comm .Functor.F-id = refl
Forget-comm .Functor.F-‚àò _ _ = refl

forget-comm-is-faithful : is-faithful (Forget-comm {‚Ñì})
forget-comm-is-faithful p i .hom = p i .hom
forget-comm-is-faithful p i .preserves = p i .preserves
