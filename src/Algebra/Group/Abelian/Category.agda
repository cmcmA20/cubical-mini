{-# OPTIONS --safe #-}
module Algebra.Group.Abelian.Category where

open import Algebra.Group.Category using (Group-structure; Groups)
open import Algebra.Group.Abelian

open import Categories.Displayed.Univalence.Thin
open import Categories.Prelude
import Categories.Morphism

open Group-hom
open AGroup-on

AGroup-structure : ‚àÄ ‚Ñì ‚Üí Thin-structure ‚Ñì AGroup-on
AGroup-structure ‚Ñì = Full-substructure ‚Ñì AGroup-on Group-on
  (Œª _ ‚Üí abelian-group-on‚Ü™group-on) (Group-structure ‚Ñì)

AGroups : ‚àÄ ‚Ñì ‚Üí Precategory (‚Ñìsuc ‚Ñì) ‚Ñì
AGroups ‚Ñì = Structured-objects (AGroup-structure ‚Ñì)

module AGroups {‚Ñì} = Categories.Morphism (AGroups ‚Ñì)

AGroup : ‚àÄ ‚Ñì ‚Üí ùí∞ (‚Ñìsuc ‚Ñì)
AGroup ‚Ñì = Precategory.Ob (AGroups ‚Ñì)

private variable ‚Ñì : Level

instance
  AGroups-equational : is-equational (AGroup-structure ‚Ñì)
  AGroups-equational .invert-id-hom p .pres-‚ãÜ _ _ = p .pres-‚ãÜ _ _ ‚Åª¬π

Forget : Functor (AGroups ‚Ñì) (Sets ‚Ñì)
Forget = Forget-structure (AGroup-structure _)

Forget-comm : Functor (AGroups ‚Ñì) (Groups ‚Ñì)
Forget-comm .Functor.F‚ÇÄ = second (abelian-group-on‚Ü™group-on $_)
Forget-comm .Functor.F‚ÇÅ f .hom = f $_
Forget-comm .Functor.F‚ÇÅ f .preserves = f .preserves
Forget-comm .Functor.F-id = refl
Forget-comm .Functor.F-‚àò _ _ = refl

forget-comm-is-faithful : is-faithful (Forget-comm {‚Ñì})
forget-comm-is-faithful p = ext $ p $‚Çö_
