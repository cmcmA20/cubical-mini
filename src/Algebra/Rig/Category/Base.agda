{-# OPTIONS --safe #-}
module Algebra.Rig.Category.Base where

open import Algebra.Rig
open import Algebra.Semiring.Category using (Semiring-structure; Semirings)

open import Categories.Displayed.Univalence.Thin
open import Categories.Prelude
import Categories.Morphism

open Semiring-hom
open Rig-on

Rig-structure : ‚àÄ ‚Ñì ‚Üí Thin-structure ‚Ñì Rig-on
Rig-structure ‚Ñì = Full-substructure ‚Ñì Rig-on Semiring-on
  (Œª _ ‚Üí rig-on‚Ü™semiring-on) (Semiring-structure ‚Ñì)

Rigs : ‚àÄ ‚Ñì ‚Üí Precategory (‚Ñìsuc ‚Ñì) ‚Ñì
Rigs ‚Ñì = Structured-objects (Rig-structure ‚Ñì)

module Rigs {‚Ñì} = Categories.Morphism (Rigs ‚Ñì)

Rig : ‚àÄ ‚Ñì ‚Üí ùí∞ (‚Ñìsuc ‚Ñì)
Rig ‚Ñì = Precategory.Ob (Rigs ‚Ñì)

private variable ‚Ñì : Level

instance
  Rigs-equational : is-equational (Rig-structure ‚Ñì)
  Rigs-equational .invert-id-hom p .pres-0 = sym (p .pres-0)
  Rigs-equational .invert-id-hom p .pres-1 = sym (p .pres-1)
  Rigs-equational .invert-id-hom p .pres-+ _ _ = sym (p .pres-+ _ _)
  Rigs-equational .invert-id-hom p .pres-¬∑ _ _ = sym (p .pres-¬∑ _ _)

Forget : Functor (Rigs ‚Ñì) (Sets ‚Ñì)
Forget = Forget-structure (Rig-structure _)

Forget-absorb : Functor (Rigs ‚Ñì) (Semirings ‚Ñì)
Forget-absorb .Functor.F‚ÇÄ = second (rig-on‚Ü™semiring-on #_)
Forget-absorb .Functor.F‚ÇÅ f .hom x = f # x
Forget-absorb .Functor.F‚ÇÅ f .preserves = f .preserves
Forget-absorb .Functor.F-id = refl
Forget-absorb .Functor.F-‚àò _ _ = refl

forget-absorb-is-faithful : is-faithful (Forget-absorb {‚Ñì})
forget-absorb-is-faithful p i .hom = p i .hom
forget-absorb-is-faithful p i .preserves = p i .preserves
