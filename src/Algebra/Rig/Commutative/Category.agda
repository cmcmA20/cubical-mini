{-# OPTIONS --safe #-}
module Algebra.Rig.Commutative.Category where

open import Algebra.Rig.Commutative
open import Algebra.Rig.Category.Base using (Rig-structure; Rigs)

open import Categories.Displayed.Univalence.Thin
open import Categories.Prelude
import Categories.Morphism

open Semiring-hom
open CRig-on

CRig-structure : ‚àÄ ‚Ñì ‚Üí Thin-structure ‚Ñì CRig-on
CRig-structure ‚Ñì = Full-substructure ‚Ñì CRig-on Rig-on
  (Œª _ ‚Üí comm-rig-on‚Ü™rig-on) (Rig-structure ‚Ñì)

CRigs : ‚àÄ ‚Ñì ‚Üí Precategory (‚Ñìsuc ‚Ñì) ‚Ñì
CRigs ‚Ñì = Structured-objects (CRig-structure ‚Ñì)

module CRigs {‚Ñì} = Categories.Morphism (CRigs ‚Ñì)

CRig : ‚àÄ ‚Ñì ‚Üí ùí∞ (‚Ñìsuc ‚Ñì)
CRig ‚Ñì = Precategory.Ob (CRigs ‚Ñì)

private variable ‚Ñì : Level

instance
  CRigs-equational : is-equational (Rig-structure ‚Ñì)
  CRigs-equational .invert-id-hom p .pres-0 = sym (p .pres-0)
  CRigs-equational .invert-id-hom p .pres-1 = sym (p .pres-1)
  CRigs-equational .invert-id-hom p .pres-+ _ _ = sym (p .pres-+ _ _)
  CRigs-equational .invert-id-hom p .pres-¬∑ _ _ = sym (p .pres-¬∑ _ _)

Forget : Functor (CRigs ‚Ñì) (Sets ‚Ñì)
Forget = Forget-structure (CRig-structure _)

Forget-comm : Functor (CRigs ‚Ñì) (Rigs ‚Ñì)
Forget-comm .Functor.F‚ÇÄ = second (comm-rig-on‚Ü™rig-on #_)
Forget-comm .Functor.F‚ÇÅ f .hom x = f # x
Forget-comm .Functor.F‚ÇÅ f .preserves = f .preserves
Forget-comm .Functor.F-id = refl
Forget-comm .Functor.F-‚àò _ _ = refl

forget-comm-is-faithful : is-faithful (Forget-comm {‚Ñì})
forget-comm-is-faithful p i .hom = p i .hom
forget-comm-is-faithful p i .preserves = p i .preserves
