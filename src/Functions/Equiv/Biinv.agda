{-# OPTIONS --safe #-}
module Functions.Equiv.Biinv where

open import Meta.Prelude
open import Meta.Extensionality
open import Meta.Record

module _
  {‚Ñìa ‚Ñìa‚àô ‚Ñìb ‚Ñìb‚àô ‚Ñìh : Level} {A : ùí∞ ‚Ñìa} {B : ùí∞ ‚Ñìb}
  {A‚àô : A ‚Üí A ‚Üí ùí∞ ‚Ñìa‚àô} {B‚àô : B ‚Üí B ‚Üí ùí∞ ‚Ñìb‚àô}
  {F : A ‚Üí B ‚Üí ùí∞ ‚Ñìh} {F‚Åª : B ‚Üí A ‚Üí ùí∞ ‚Ñìh}
  ‚¶É _ : Refl A‚àô ‚¶Ñ ‚¶É _ : Refl B‚àô ‚¶Ñ
  ‚¶É _ : Comp F F‚Åª A‚àô ‚¶Ñ ‚¶É _ : Comp F‚Åª F B‚àô ‚¶Ñ
  ‚¶É _ : Comp F‚Åª A‚àô F‚Åª ‚¶Ñ ‚¶É _ : Comp B‚àô F‚Åª F‚Åª ‚¶Ñ
  ‚¶É _ : Comp A‚àô A‚àô A‚àô ‚¶Ñ ‚¶É _ : Comp B‚àô B‚àô B‚àô ‚¶Ñ
  ‚¶É _ : GUnit-o A‚àô A‚àô ‚¶Ñ ‚¶É _ : GUnit-i B‚àô B‚àô ‚¶Ñ
  ‚¶É _ : GUnit-i F‚Åª A‚àô ‚¶Ñ ‚¶É _ : GUnit-o B‚àô F‚Åª ‚¶Ñ
  ‚¶É _ : GAssoc F F‚Åª A‚àô A‚àô F‚Åª A‚àô ‚¶Ñ ‚¶É _ : GAssoc F‚Åª F F‚Åª B‚àô A‚àô F‚Åª ‚¶Ñ
  ‚¶É _ : GAssoc B‚àô F‚Åª F F‚Åª B‚àô B‚àô ‚¶Ñ

  {x : A} {y : B}
  where
  qinv‚Üíhas-retraction-is-contr
    : {f : F x y} ‚Üí quasi-inverse f ‚Üí is-contr (has-retraction f)
  qinv‚Üíhas-retraction-is-contr fi = ‚âÖ‚Üíis-of-hlevel 0 has-retraction-Iso $
    is-biinv‚Üípost-is-equiv {C‚àô = A‚àô} (qinv‚Üíis-biinv fi) .equiv-proof refl

  qinv‚Üíhas-section-is-contr
    : {f : F x y} ‚Üí quasi-inverse f ‚Üí is-contr (has-section f)
  qinv‚Üíhas-section-is-contr fi = ‚âÖ‚Üíis-of-hlevel 0 has-section-Iso $
    is-biinv‚Üípre-is-equiv {C‚àô = B‚àô} (qinv‚Üíis-biinv fi) .equiv-proof refl

  is-biinv-is-prop : {f : F x y} ‚Üí is-prop (is-biinv f)
  is-biinv-is-prop {f} = contractible-if-inhabited contract where
    contract : is-biinv f ‚Üí is-contr (is-biinv f)
    contract ibiinv =
      √ó-is-of-hlevel 0 (qinv‚Üíhas-retraction-is-contr i)
                       (qinv‚Üíhas-section-is-contr i)
      where i = is-biinv‚Üíqinv ibiinv

  open Biinv
  instance
    H-Level-is-biinv : ‚àÄ{n} ‚¶É _ : n ‚â• ∞ 1 ‚¶Ñ {f : F x y} ‚Üí H-Level n (is-biinv f)
    H-Level-is-biinv ‚¶É s‚â§ ∞s _ ‚¶Ñ = hlevel-prop-instance is-biinv-is-prop

  opaque
    private
      ‚âä-inverse-unique-internal
        : (x‚Ä≤ : A) (p : x Ôºù x‚Ä≤) (y‚Ä≤ : B) (q : y Ôºù y‚Ä≤)
          {e : Biinv F F‚Åª x y} {e‚Ä≤ : Biinv F F‚Åª x‚Ä≤ y‚Ä≤}
        ‚Üí Ôºú e .to Ôºè (Œª i ‚Üí F (p i) (q i)) Ôºº e‚Ä≤ .to Ôºû
        ‚Üí Ôºú e .from Ôºè (Œª i ‚Üí F‚Åª (q i) (p i)) Ôºº e‚Ä≤ .from Ôºû
      ‚âä-inverse-unique-internal = J>! (J>! Œª {e e‚Ä≤} r
        ‚Üí sym (‚àô-id-o _)
        ‚àô (sym ((is-biinv‚Üíunique-inverse (e‚Ä≤ .has-biinv) ‚ñ∑ e‚Ä≤ .to) ‚àô e‚Ä≤ .is-section) ‚ñ∑ e .from)
        ‚àô sym (‚àô-assoc _ (e‚Ä≤ .to) _)
        ‚àô (e‚Ä≤ .from ‚óÅ sym r ‚ñ∑ e .from)
        ‚àô (e‚Ä≤ .from ‚óÅ e .from-is-retraction)
        ‚àô ‚àô-id-i _ )

    ‚âä-inverse-unique
      : {x‚Ä≤ : A} (p : x Ôºù x‚Ä≤) {y‚Ä≤ : B} (q : y Ôºù y‚Ä≤)
        {e : Biinv F F‚Åª x y} {e‚Ä≤ : Biinv F F‚Åª x‚Ä≤ y‚Ä≤}
      ‚Üí Ôºú e .to Ôºè (Œª i ‚Üí F (p i) (q i)) Ôºº e‚Ä≤ .to Ôºû
      ‚Üí Ôºú e .from Ôºè (Œª i ‚Üí F‚Åª (q i) (p i)) Ôºº e‚Ä≤ .from Ôºû
    ‚âä-inverse-unique p = ‚âä-inverse-unique-internal _ p _

  private
    ‚âä-path·¥æ-internal
      : ‚àÄ {x‚Ä≤ y‚Ä≤} (p : x Ôºù x‚Ä≤) (q : y Ôºù y‚Ä≤)
      ‚Üí {e : Biinv F F‚Åª x y} {e‚Ä≤ : Biinv F F‚Åª x‚Ä≤ y‚Ä≤}
      ‚Üí (r : Ôºú e .to Ôºè (Œª i ‚Üí F (p i) (q i)) Ôºº e‚Ä≤ .to Ôºû)
      ‚Üí Ôºú e .has-biinv Ôºè (Œª i ‚Üí is-biinv (r i)) Ôºº e‚Ä≤ .has-biinv Ôºû
      ‚Üí Ôºú e Ôºè (Œª i ‚Üí Biinv F F‚Åª (p i) (q i)) Ôºº e‚Ä≤ Ôºû
    ‚âä-path·¥æ-internal _ _ r _ i .to = r i
    ‚âä-path·¥æ-internal _ _ _ s i .has-biinv = s i

  ‚âä-path·¥æ
    : ‚àÄ {x‚Ä≤ y‚Ä≤} (p : x Ôºù x‚Ä≤) (q : y Ôºù y‚Ä≤)
      {e : Biinv F F‚Åª x y} {e‚Ä≤ : Biinv F F‚Åª x‚Ä≤ y‚Ä≤}
    ‚Üí Ôºú e .to Ôºè (Œª i ‚Üí F (p i) (q i)) Ôºº e‚Ä≤ .to Ôºû
    ‚Üí Ôºú e Ôºè (Œª i ‚Üí Biinv F F‚Åª (p i) (q i)) Ôºº e‚Ä≤ Ôºû
  ‚âä-path·¥æ p q r = ‚âä-path·¥æ-internal p q r prop!

  -- TODO later
  -- ‚âä-path·¥æ-from
  --   : ‚àÄ {x‚Ä≤ y‚Ä≤} (p : x Ôºù x‚Ä≤) (q : y Ôºù y‚Ä≤)
  --     {e : Biinv F F‚Åª x y} {e‚Ä≤ : Biinv F F‚Åª x‚Ä≤ y‚Ä≤}
  --   ‚Üí Ôºú e .from Ôºè (Œª i ‚Üí F‚Åª (q i) (p i)) Ôºº e‚Ä≤ .from Ôºû
  --   ‚Üí Ôºú e Ôºè (Œª i ‚Üí Biinv F F‚Åª (p i) (q i)) Ôºº e‚Ä≤ Ôºû
  -- ‚âä-path·¥æ-from p q {e} {e‚Ä≤} r = ?

  -- ‚âä-path-from : {e e‚Ä≤ : Biinv F F‚Åª x y} ‚Üí e .from Ôºù e‚Ä≤ .from ‚Üí e Ôºù e‚Ä≤
  -- ‚âä-path-from = ‚âä-path·¥æ-from refl refl

  instance
    Extensional-‚âä : ‚àÄ {‚Ñìr} ‚¶É sa : Extensional (F x y) ‚Ñìr ‚¶Ñ ‚Üí Extensional (Biinv F F‚Åª x y) ‚Ñìr
    Extensional-‚âä ‚¶É sa ‚¶Ñ .Path·µâ e‚ÇÅ e‚ÇÇ = sa .Path·µâ (e‚ÇÅ .to) (e‚ÇÇ .to)
    Extensional-‚âä ‚¶É sa ‚¶Ñ .refl·µâ e = sa .refl·µâ (e .to)
    Extensional-‚âä ‚¶É sa ‚¶Ñ .ids·µâ .to-path p = ‚âä-path·¥æ refl refl (sa .ids·µâ .to-path p)
    Extensional-‚âä ‚¶É sa ‚¶Ñ .ids·µâ .to-path-over p = sa .ids·µâ .to-path-over p
