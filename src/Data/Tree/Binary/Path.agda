{-# OPTIONS --safe #-}
module Data.Tree.Binary.Path where

open import Meta.Prelude

open import Meta.Search.HLevel

open import Structures.IdentitySystem

open import Data.Empty.Base
open import Data.Nat.Base
open import Data.Unit.Base

open import Data.Tree.Binary.Base

private variable
  ‚Ñì ‚Ñì‚Ä≤ : Level
  A : Type ‚Ñì
  x y : A
  tl tr xl xr yl yr xs ys : Tree A
  n : HLevel

empty‚â†leaf : empty ‚â† leaf x
empty‚â†leaf p = subst discrim p tt where
  discrim : Tree A ‚Üí ùí∞
  discrim empty = ‚ä§
  discrim _ = ‚ä•

empty‚â†node : empty ‚â† node tl tr
empty‚â†node p = subst discrim p tt where
  discrim : Tree A ‚Üí ùí∞
  discrim empty = ‚ä§
  discrim _ = ‚ä•

leaf‚â†node : leaf x ‚â† node tl tr
leaf‚â†node p = subst discrim p tt where
  discrim : Tree A ‚Üí ùí∞
  discrim (leaf _) = ‚ä§
  discrim _ = ‚ä•

leaf-inj : leaf x Ôºù leaf y ‚Üí x Ôºù y
leaf-inj {x} = ap go where
  go : Tree _ ‚Üí _
  go (leaf x) = x
  go _ = x

node-inj : node xl xr Ôºù node yl yr ‚Üí (xl Ôºù yl) √ó (xr Ôºù yr)
node-inj {xl} p = ap go‚ÇÅ p , ap go‚ÇÇ p where
  go‚ÇÅ : Tree _ ‚Üí _
  go‚ÇÅ (node tl _) = tl
  go‚ÇÅ _ = xl
  go‚ÇÇ : Tree _ ‚Üí _
  go‚ÇÇ (node _ tr) = tr
  go‚ÇÇ _ = xl


Code : Tree A ‚Üí Tree A ‚Üí Type (level-of-type A)
Code empty empty = Lift _ ‚ä§
Code (leaf x) (leaf y) = x Ôºù y
Code (node xl xr) (node yl yr) = Code xl yl √ó Code xr yr
Code _ _ = Lift _ ‚ä•

code-refl : (t : Tree A) ‚Üí Code t t
code-refl empty = lift tt
code-refl (leaf _) = refl
code-refl (node tl tr) = code-refl tl , code-refl tr

decode : Code xs ys ‚Üí xs Ôºù ys
decode {xs = empty} {ys = empty} _ = refl
decode {xs = leaf x} {ys = leaf y} = ap leaf
decode {xs = node xl xr} {ys = node yl yr} (p , q) = ap¬≤ node (decode p) (decode q)

identity-system : is-identity-system {A = Tree A} Code code-refl
identity-system .to-path      = decode
identity-system .to-path-over = code-refl-path·¥æ where
  code-refl-path·¥æ : {xs ys : Tree A} (c : Code xs ys) ‚Üí Ôºú code-refl xs Ôºè (Œª i ‚Üí Code xs (decode c i)) Ôºº c Ôºû
  code-refl-path·¥æ {xs = empty} {ys = empty} _ = refl
  code-refl-path·¥æ {xs = leaf x} {leaf y} p i j = p (i ‚àß j)
  code-refl-path·¥æ {xs = node xl xr} {ys = node yl yr} (cl , cr) i = code-refl-path·¥æ cl i , code-refl-path·¥æ cr i

code-is-of-hlevel : is-of-hlevel (2 + n) A ‚Üí is-of-hlevel (1 + n) (Code {A = A} xs ys)
code-is-of-hlevel {xs = empty} {ys = empty} = hlevel!
code-is-of-hlevel {xs = empty} {leaf _} = hlevel!
code-is-of-hlevel {xs = empty} {node _ _} = hlevel!
code-is-of-hlevel {xs = leaf _} {ys = empty} = hlevel!
code-is-of-hlevel {xs = leaf x} {leaf y} hl = path-is-of-hlevel _ hl x y
code-is-of-hlevel {xs = leaf _} {node _ _} = hlevel!
code-is-of-hlevel {xs = node _ _} {ys = empty} = hlevel!
code-is-of-hlevel {xs = node _ _} {leaf _} = hlevel!
code-is-of-hlevel {xs = node xl xr} {node yl yr} hl =
  √ó-is-of-hlevel _ (code-is-of-hlevel hl) (code-is-of-hlevel hl)

tree-is-of-hlevel : (n : HLevel)
                  ‚Üí is-of-hlevel (2 + n) A
                  ‚Üí is-of-hlevel (2 + n) (Tree A)
tree-is-of-hlevel n A-hl = is-of-hlevel-Œ∑ n Œª _ _ ‚Üí
  ‚âÉ‚Üíis-of-hlevel (suc n)
                 (identity-system-gives-path identity-system ‚Åª¬π)
                 (code-is-of-hlevel A-hl)

instance
  decomp-hlevel-binary-tree
    : ‚àÄ {‚Ñì} {A : Type ‚Ñì}
    ‚Üí goal-decomposition (quote is-of-hlevel) (Tree A)
  decomp-hlevel-binary-tree = decomp (quote tree-is-of-hlevel)
    [ `level-minus 2 , `search (quote is-of-hlevel) ]
