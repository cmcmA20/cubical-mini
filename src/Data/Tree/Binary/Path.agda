{-# OPTIONS --safe --no-exact-split #-}
module Data.Tree.Binary.Path where

open import Meta.Prelude

open import Meta.Extensionality

open import Data.Empty.Base
open import Data.Nat.Base
open import Data.Unit.Base

open import Data.Tree.Binary.Base as Tree

private variable
  ‚Ñì ‚Ñì‚Ä≤ ‚Ñì·µÉ : Level
  A : Type ‚Ñì
  x y : A
  tl tr xl xr yl yr xs ys : Tree A
  n : HLevel

empty‚â†leaf : Tree.empty ‚â† leaf x
empty‚â†leaf p = subst discrim p tt where
  discrim : Tree A ‚Üí ùí∞
  discrim empty = ‚ä§
  discrim _ = ‚ä•

empty‚â†node : Tree.empty ‚â† node tl tr
empty‚â†node p = subst discrim p tt where
  discrim : Tree A ‚Üí ùí∞
  discrim empty = ‚ä§
  discrim _ = ‚ä•

leaf‚â†node : leaf x ‚â† node tl tr
leaf‚â†node p = subst discrim p tt where
  discrim : Tree A ‚Üí ùí∞
  discrim (leaf _) = ‚ä§
  discrim _ = ‚ä•

leaf-inj : leaf x Ôºù leaf y ‚Üí x Ôºù y
leaf-inj {x} = ap go where
  go : Tree _ ‚Üí _
  go (leaf x) = x
  go _ = x

node-inj : node xl xr Ôºù node yl yr ‚Üí (xl Ôºù yl) √ó (xr Ôºù yr)
node-inj {xl} p = ap go‚ÇÅ p , ap go‚ÇÇ p where
  go‚ÇÅ : Tree _ ‚Üí _
  go‚ÇÅ (node tl _) = tl
  go‚ÇÅ _ = xl
  go‚ÇÇ : Tree _ ‚Üí _
  go‚ÇÇ (node _ tr) = tr
  go‚ÇÇ _ = xl


module _ {A : ùí∞ ‚Ñì·µÉ} ‚¶É sa : Extensional A ‚Ñì ‚¶Ñ where
  Code-Tree : Tree A ‚Üí Tree A ‚Üí Type ‚Ñì
  Code-Tree empty empty = ‚ä§
  Code-Tree (leaf x) (leaf y) = sa .Path·µâ x y
  Code-Tree (node xl xr) (node yl yr) = Code-Tree xl yl √ó Code-Tree xr yr
  Code-Tree _ _ = ‚ä•

  code-tree-refl : (t : Tree A) ‚Üí Code-Tree t t
  code-tree-refl empty = lift tt
  code-tree-refl (leaf x) = sa .refl·µâ x
  code-tree-refl (node tl tr) = code-tree-refl tl , code-tree-refl tr

  decode-tree : Code-Tree xs ys ‚Üí xs Ôºù ys
  decode-tree {xs = empty} {ys = empty} _ = refl
  decode-tree {xs = leaf x} {ys = leaf y} = ap leaf ‚àò sa .ids·µâ .to-path
  decode-tree {xs = node xl xr} {ys = node yl yr} (p , q) = ap¬≤ node (decode-tree p) (decode-tree q)

  code-tree-refl·¥æ : (c : Code-Tree xs ys) ‚Üí code-tree-refl xs Ôºù[ ap (Code-Tree xs) (decode-tree c) ]Ôºù c
  code-tree-refl·¥æ {(empty)}    {(empty)} _ = refl
  code-tree-refl·¥æ {leaf x}     {leaf y}    = sa .ids·µâ .to-path-over
  code-tree-refl·¥æ {node xl xr} {node yl yr} (cl , cr) = code-tree-refl·¥æ {xl} cl ,‚Çö code-tree-refl·¥æ {xr} cr

  instance
    Extensional-Tree : Extensional (Tree A) ‚Ñì
    Extensional-Tree .Path·µâ = Code-Tree
    Extensional-Tree .refl·µâ = code-tree-refl
    Extensional-Tree .ids·µâ .to-path = decode-tree
    Extensional-Tree .ids·µâ .to-path-over {a} = code-tree-refl·¥æ {a}

opaque
  code-is-of-hlevel : is-of-hlevel (2 + n) A ‚Üí is-of-hlevel (1 + n) (Code-Tree {A = A} xs ys)
  code-is-of-hlevel {n} {xs = empty} {ys = empty} _ = hlevel _
  code-is-of-hlevel {xs = empty} {leaf _} _ = hlevel _
  code-is-of-hlevel {xs = empty} {node _ _} _ = hlevel _
  code-is-of-hlevel {xs = leaf _} {ys = empty} _ = hlevel _
  code-is-of-hlevel {xs = leaf x} {leaf y} hl = path-is-of-hlevel _ hl x y
  code-is-of-hlevel {xs = leaf _} {node _ _} _ = hlevel _
  code-is-of-hlevel {xs = node _ _} {ys = empty} _ = hlevel _
  code-is-of-hlevel {xs = node _ _} {leaf _} _ = hlevel _
  code-is-of-hlevel {xs = node xl xr} {node yl yr} hl =
    √ó-is-of-hlevel _ (code-is-of-hlevel {xs = xl} hl) (code-is-of-hlevel {xs = xr} hl)

  tree-is-of-hlevel : (n : HLevel)
                    ‚Üí is-of-hlevel (2 + n) A
                    ‚Üí is-of-hlevel (2 + n) (Tree A)
  tree-is-of-hlevel n A-hl xs ys =
    ‚âÉ‚Üíis-of-hlevel (suc n)
                   (identity-system-gives-path (Extensional-Tree .ids·µâ) ‚Åª¬π)
                   (code-is-of-hlevel {xs = xs} A-hl)

instance opaque
  H-Level-binary-tree : ‚àÄ {n} ‚Üí ‚¶É n ‚â• ∞ 2 ‚¶Ñ ‚Üí ‚¶É A-hl : H-Level n A ‚¶Ñ ‚Üí H-Level n (Tree A)
  H-Level-binary-tree {n} ‚¶É s‚â§ ∞s (s‚â§ ∞s _) ‚¶Ñ .H-Level.has-of-hlevel = tree-is-of-hlevel _ (hlevel n)
  {-# OVERLAPPING H-Level-binary-tree #-}
