{-# OPTIONS --safe --no-exact-split #-}
module Data.List.Path where

open import Meta.Prelude
open import Meta.Extensionality

open import Data.Empty.Base
open import Data.Unit.Base

open import Data.List.Base

private variable
  ‚Ñì ‚Ñì‚Ä≤ ‚Ñì·µÉ : Level
  n : HLevel
  A : Type ‚Ñì·µÉ
  x y : A
  xs ys : List A

‚à∑-head-inj : x ‚à∑ xs Ôºù y ‚à∑ ys ‚Üí x Ôºù y
‚à∑-head-inj {x} = ap (head x)

‚à∑-tail-inj : x ‚à∑ xs Ôºù y ‚à∑ ys ‚Üí xs Ôºù ys
‚à∑-tail-inj = ap tail

‚à∑‚â†[] : ¬¨ (x ‚à∑ xs) Ôºù []
‚à∑‚â†[] p = subst discrim p tt
  where
  discrim : List _ ‚Üí Type
  discrim []      = ‚ä•
  discrim (_ ‚à∑ _) = ‚ä§

module _ {A : ùí∞ ‚Ñì·µÉ} ‚¶É sa : Extensional A ‚Ñì ‚¶Ñ where
  Code-List : List A ‚Üí List A ‚Üí ùí∞ ‚Ñì
  Code-List []       []       = ‚ä§
  Code-List (x ‚à∑ xs) (y ‚à∑ ys) = sa .Path·µâ x y √ó Code-List xs ys
  Code-List _ _ = ‚ä•

  code-list-refl : (xs : List A) ‚Üí Code-List xs xs
  code-list-refl []       = _
  code-list-refl (x ‚à∑ xs) = sa .refl·µâ x , code-list-refl xs

  decode-list : Code-List xs ys ‚Üí xs Ôºù ys
  decode-list {xs = []}     {([])}   _       = refl
  decode-list {xs = x ‚à∑ xs} {y ‚à∑ ys} (p , c) = ap¬≤ _‚à∑_ (sa .ids·µâ .to-path p) (decode-list c)

  code-list-refl·¥æ
    : (c : Code-List xs ys)
    ‚Üí code-list-refl xs Ôºù[ ap (Code-List xs) (decode-list c) ]Ôºù c
  code-list-refl·¥æ {xs = []}     {([])}   _       = refl
  code-list-refl·¥æ {xs = x ‚à∑ xs} {y ‚à∑ ys} (p , c) = sa .ids·µâ .to-path-over p ,‚Çö code-list-refl·¥æ c

  instance
    Extensional-List : Extensional (List A) ‚Ñì
    Extensional-List .Path·µâ = Code-List
    Extensional-List .refl·µâ = code-list-refl
    Extensional-List .ids·µâ .to-path = decode-list
    Extensional-List .ids·µâ .to-path-over = code-list-refl·¥æ

opaque
  code-list-is-of-hlevel
    : {n : HLevel} {xs ys : List A} ‚Üí is-of-hlevel (2 + n) A ‚Üí is-of-hlevel (1 + n) (Code-List xs ys)
  code-list-is-of-hlevel {xs = []}     {([])}   _  = hlevel _
  code-list-is-of-hlevel {xs = x ‚à∑ xs} {y ‚à∑ ys} hl =
    √ó-is-of-hlevel _ (hl x y) (code-list-is-of-hlevel {xs = xs} hl)
  code-list-is-of-hlevel {xs = []}     {_ ‚à∑ _}  _  = hlevel _
  code-list-is-of-hlevel {xs = x ‚à∑ xs} {([])}   _  = hlevel _

  list-is-of-hlevel : (n : HLevel)
                    ‚Üí is-of-hlevel (2 + n) A
                    ‚Üí is-of-hlevel (2 + n) (List A)
  list-is-of-hlevel n A-hl xs _ =
    ‚âÉ‚Üíis-of-hlevel (1 + n)
                   (identity-system-gives-path (Extensional-List .ids·µâ) ‚Åª¬π)
                   (code-list-is-of-hlevel {xs = xs} A-hl)

instance opaque
  H-Level-List : ‚àÄ {n} ‚Üí ‚¶É n ‚â• ∞ 2 ‚¶Ñ ‚Üí ‚¶É A-hl : H-Level n A ‚¶Ñ ‚Üí H-Level n (List A)
  H-Level-List {n} ‚¶É s‚â§ ∞s (s‚â§ ∞s _) ‚¶Ñ .H-Level.has-of-hlevel = list-is-of-hlevel _ (hlevel n)
  {-# OVERLAPPING H-Level-List #-}
