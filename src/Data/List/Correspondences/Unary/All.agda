{-# OPTIONS --safe #-}
module Data.List.Correspondences.Unary.All where

open import Meta.Prelude
open import Meta.Effect
open import Meta.Extensionality
open Variadics _

open import Logic.Decidability
open import Logic.Discreteness

open import Data.Unit.Base
open import Data.List.Base
open import Data.List.Path
open import Data.Dec as Dec

private variable
  ‚Ñì ‚Ñì·µÉ : Level
  A : Type ‚Ñì·µÉ
  P Q R : Pred A ‚Ñì
  x : A
  @0 xs ys : List A

infixr 5 _‚à∑_
data All {‚Ñì ‚Ñì·µÉ} {A : Type ‚Ñì·µÉ} (P : Pred A ‚Ñì) : @0 List A ‚Üí Type (‚Ñì ‚äî ‚Ñì·µÉ) where
  []  : All P []
  _‚à∑_ : P x ‚Üí All P xs ‚Üí All P (x ‚à∑ xs)

all-head : All P (x ‚à∑ xs) ‚Üí P x
all-head (x ‚à∑ _) = x

all-tail : All P (x ‚à∑ xs) ‚Üí All P xs
all-tail (_ ‚à∑ xs) = xs

module _ {A : ùí∞ ‚Ñì·µÉ} {P : Pred A ‚Ñì} ‚¶É ep : {a : A} ‚Üí Extensional (P a) ‚Ñì ‚¶Ñ where
  Code-All : {xs : List A} (p q : All P xs) ‚Üí ùí∞ ‚Ñì
  Code-All {xs = []}     []       []       = ‚ä§
  Code-All {xs = x ‚à∑ xs} (px ‚à∑ p) (qx ‚à∑ q) = ep .Path·µâ px qx √ó‚Çú Code-All p q

  code-all-refl : {xs : List A} (p : All P xs) ‚Üí Code-All p p
  code-all-refl {xs = []}     []       = _
  code-all-refl {xs = x ‚à∑ xs} (px ‚à∑ p) = ep .refl·µâ px , code-all-refl p

  decode-all : {xs : List A} {p q : All P xs} (c : Code-All p q) ‚Üí p Ôºù q
  decode-all {xs = []}     {p = []}     {q = []}      _       = refl
  decode-all {xs = x ‚à∑ xs} {p = px ‚à∑ p} {q = qx ‚à∑ q} (cx , c) =
    ap¬≤ {C = Œª _ _ ‚Üí All P (x ‚à∑ xs)} _‚à∑_ (ep .ids·µâ .to-path cx) (decode-all c)

  decode-all-refl : {xs : List A} {p q : All P xs} (c : Code-All p q)
                  ‚Üí code-all-refl p Ôºù[ ap (Code-All p) (decode-all c) ]Ôºù c
  decode-all-refl {xs = []}     {p = []}     {q = []}     (lift tt) = refl
  decode-all-refl {xs = x ‚à∑ xs} {p = px ‚à∑ p} {q = qx ‚à∑ q} (cx , c)  =
    ep .ids·µâ .to-path-over cx ,‚Çö decode-all-refl c

  Extensional-All : {xs : List A} ‚Üí Extensional (All P xs) ‚Ñì
  Extensional-All .Path·µâ              = Code-All
  Extensional-All .refl·µâ              = code-all-refl
  Extensional-All .ids·µâ .to-path      = decode-all
  Extensional-All .ids·µâ .to-path-over = decode-all-refl

-- this can be strengthened by requiring the hlevel of P only on x such that x ‚àà‚Çó xs
opaque
  code-all-is-of-hlevel
    : ‚àÄ {n} {xs : List A} {u v : All P xs}
    ‚Üí (‚àÄ x ‚Üí is-of-hlevel (suc n) (P x))
    ‚Üí is-of-hlevel n (Code-All u v)
  code-all-is-of-hlevel {n} {xs = []}     {u = []}     {v = []}     hl = hlevel n
  code-all-is-of-hlevel {n} {xs = x ‚à∑ xs} {u = ux ‚à∑ u} {v = vx ‚à∑ v} hl =
    √ó-is-of-hlevel n (path-is-of-hlevel n (hl x) ux vx) (code-all-is-of-hlevel hl)

all-is-contr
    : {xs : List A}
    ‚Üí (‚àÄ x ‚Üí is-contr (P x))
    ‚Üí is-contr (All P xs)
all-is-contr     {xs = []}     cntr = [] , Œª where [] ‚Üí refl
all-is-contr {P} {xs = x ‚à∑ xs} cntr =
  let (xc , xeq) = cntr x
      (ac , aeq) = all-is-contr {xs = xs} cntr
    in
    xc ‚à∑ ac
  , Œª where (px ‚à∑ pxs) ‚Üí ap¬≤ {C = Œª _ _ ‚Üí All P (x ‚à∑ xs)} _‚à∑_ (xeq px) (aeq pxs)

all-is-of-hlevel
  : (n : HLevel) {xs : List A}
  ‚Üí (‚àÄ x ‚Üí is-of-hlevel n (P x))
  ‚Üí is-of-hlevel n (All P xs)
all-is-of-hlevel  zero   hl = all-is-contr hl
all-is-of-hlevel (suc n) hl =
  identity-system‚Üíis-of-hlevel n (Extensional-All .ids·µâ) (Œª x y ‚Üí code-all-is-of-hlevel hl)

instance
  H-Level-All : ‚àÄ {n} ‚Üí {xs : List A} ‚Üí ‚¶É A-hl : ‚àÄ {x} ‚Üí H-Level n (P x) ‚¶Ñ ‚Üí H-Level n (All P xs)
  H-Level-All {n} .H-Level.has-of-hlevel = all-is-of-hlevel _  (Œª _ ‚Üí hlevel n)
  {-# OVERLAPPING H-Level-All #-}

all-uncons : {x : A} {@0 xs : List A} ‚Üí All P (x ‚à∑ xs) ‚Üí P x √ó All P xs
all-uncons (px ‚à∑ pxs) = px , pxs

all-++ : {@0 xs : List A} ‚Üí All P xs ‚Üí All P ys ‚Üí All P (xs ++ ys)
all-++ []         pys = pys
all-++ (px ‚à∑ pxs) pys = px ‚à∑ all-++ pxs pys

all-split : {xs : List A} ‚Üí All P (xs ++ ys) ‚Üí All P xs √ó All P ys
all-split {xs = []}      ps      = [] , ps
all-split {xs = x ‚à∑ xs} (p ‚à∑ ps) = first (p ‚à∑_) (all-split ps)

all-++-left : {xs : List A} ‚Üí All P (xs ++ ys) ‚Üí All P xs
all-++-left = fst ‚àò all-split

all-++-right : {xs : List A} ‚Üí All P (xs ++ ys) ‚Üí All P ys
all-++-right = snd ‚àò all-split

all-map : {@0 xs : List A} ‚Üí ‚àÄ[ P ‚áí Q ] ‚Üí All P xs ‚Üí All Q xs
all-map     f []       = []
all-map {P} f (p ‚à∑ ps) = f p ‚à∑ all-map f ps

all-zip-with : {@0 xs : List A} ‚Üí ‚àÄ·¥±[ P ‚áí Q ‚áí R ] ‚Üí All P xs ‚Üí All Q xs ‚Üí All R xs
all-zip-with     f [] [] = []
all-zip-with {P} f (p ‚à∑ ps) (q ‚à∑ qs) = f p q ‚à∑ all-zip-with {P = P} f ps qs

all? : Decidable P ‚Üí Decidable (Œª (xs : List A) ‚Üí All P xs)
all? P? {([])}   = yes []
all? P? {x ‚à∑ xs} =
  Dec.dmap (_‚à∑_ $‚Çú¬≤_)
           (Œª { ¬¨ps (px ‚à∑ ps) ‚Üí ¬¨ps (px , ps) })
           (P? <,> all? P?)
