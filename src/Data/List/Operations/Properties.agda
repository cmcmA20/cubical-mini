{-# OPTIONS --safe #-}
module Data.List.Operations.Properties where

open import Meta.Prelude
open import Meta.Effect
open import Foundations.Base

open import Logic.Decidability
open import Logic.Discreteness

open import Order.Constructions.Minmax
open import Order.Constructions.Nat

open import Data.Empty as Empty
open import Data.Bool.Base as Bool
open import Data.Bool.Path
open import Data.Bool.Properties
open import Data.Sum.Base as Sum
open import Data.Dec.Base as Dec
open import Data.Reflects.Base as Reflects
open import Data.Reflects.Properties
open import Data.Maybe.Base as Maybe
open import Data.Maybe.Path
open import Data.List.Base as List
open import Data.List.Path
open import Data.List.Properties
open import Data.List.Operations
open import Data.List.Correspondences.Unary.All
open import Data.List.Correspondences.Unary.Any
open import Data.List.Membership
open import Data.List.Instances.Map
open import Data.List.Correspondences.Binary.Prefix
open import Data.List.Correspondences.Binary.OPE
open import Data.Nat.Base
open import Data.Nat.Path
open import Data.Nat.Two
open import Data.Nat.Two.Properties
open import Data.Nat.Order.Base
open import Data.Nat.Properties

private variable
  ‚Ñì ‚Ñì‚Ä≤ ‚Ñì‚Ä≥ : Level
  A : Type ‚Ñì
  B : Type ‚Ñì‚Ä≤
  C : Type ‚Ñì‚Ä≥
  m n : ‚Ñï
  xs ys : List A
  x y z w : A

-- rec

rec-++ : (z : B) (f : A ‚Üí B ‚Üí B) (xs ys : List A)
       ‚Üí List.rec z f (xs ++ ys) Ôºù List.rec (List.rec z f ys) f xs
rec-++ z f [] ys = refl
rec-++ z f (x ‚à∑ xs) ys = ap (f x) (rec-++ z f xs ys)

rec-map : {A : Type ‚Ñì} {B : Type ‚Ñì‚Ä≤}
          (z : C) (f : B ‚Üí C ‚Üí C) (h : A ‚Üí B) (xs : List A)
        ‚Üí List.rec z f (map h xs) Ôºù List.rec z (f ‚àò h) xs
rec-map z f h [] = refl
rec-map z f h (x ‚à∑ xs) = ap (f (h x)) (rec-map z f h xs)

rec-fusion : {A : Type ‚Ñì} {B : Type ‚Ñì‚Ä≤} {C : Type ‚Ñì‚Ä≥}
             {z : B} {f : A ‚Üí B ‚Üí B} {g : A ‚Üí C ‚Üí C} {h : B ‚Üí C}
             (xs : List A)
           ‚Üí (‚àÄ x y ‚Üí h (f x y) Ôºù g x (h y))
           ‚Üí h (List.rec z f xs) Ôºù List.rec (h z) g xs
rec-fusion             []       eq = refl
rec-fusion {z} {f} {g} (x ‚à∑ xs) eq = eq x (List.rec z f xs) ‚àô ap (g x) (rec-fusion xs eq)

-- length

length=0‚Üínil : length xs Ôºù 0 ‚Üí xs Ôºù []
length=0‚Üínil {xs = []}     eq = refl
length=0‚Üínil {xs = x ‚à∑ xs} eq = false! eq

length=1‚Üísng : length xs Ôºù 1 ‚Üí Œ£[ x Íûâ A ] (xs Ôºù x ‚à∑ [])
length=1‚Üísng {xs = []}     eq = false! eq
length=1‚Üísng {xs = x ‚à∑ xs} eq = x , ap (x ‚à∑_) (length=0‚Üínil (suc-inj eq))

length>0‚ÜíŒ£ : 0 < length xs ‚Üí Œ£[ z Íûâ A ] (z ‚àà‚Çó xs)
length>0‚ÜíŒ£ {xs = []}     gt = false! gt
length>0‚ÜíŒ£ {xs = x ‚à∑ xs} _  = x , here refl

map-length : {A : Type ‚Ñì} {B : Type ‚Ñì‚Ä≤}
             {f : A ‚Üí B} {xs : List A}
           ‚Üí length (map f xs) Ôºù length xs
map-length {f} {xs = []}     = refl
map-length {f} {xs = x ‚à∑ xs} = ap suc (map-length {xs = xs})

++-length : (xs ys : List A) ‚Üí length (xs ++ ys) Ôºù length xs + length ys
++-length []       ys = refl
++-length (x ‚à∑ xs) ys = ap suc (++-length xs ys)

++-same-inj : (as xs : List A) {bs ys : List A}
            ‚Üí length as Ôºù length xs
            ‚Üí as ++ bs Ôºù xs ++ ys
            ‚Üí (as Ôºù xs) √ó (bs Ôºù ys)
++-same-inj     []       []       el e = refl , e
++-same-inj     []       (x ‚à∑ xs) el e = false! el
++-same-inj     (a ‚à∑ as) []       el e = false! el
++-same-inj {A} (a ‚à∑ as) (x ‚à∑ xs) el e =
  let ih = ++-same-inj as xs (suc-inj el) (‚à∑-tail-inj e) in
  ap¬≤ {C = Œª _ _ ‚Üí List A} _‚à∑_ (‚à∑-head-inj e) (ih .fst) , ih .snd

opaque
  unfolding Prefix
  prefix-length : Prefix xs ys ‚Üí length xs ‚â§ length ys
  prefix-length {xs} (ts , et) =
    subst (Œª q ‚Üí length xs ‚â§ length q) et $
    subst (length xs ‚â§_) (++-length xs ts ‚Åª¬π) $
    ‚â§-+-r

opaque
  unfolding Prefix1
  prefix1-length : Prefix1 xs ys ‚Üí length xs < length ys
  prefix1-length {xs} (t , ts , et) =
    subst (Œª q ‚Üí length xs < length q) et $
    subst (length xs <_) (+-comm (suc (length ts)) (length xs) ‚àô ++-length xs (t ‚à∑ ts) ‚Åª¬π) $
    <-+-lr

-- !·µê

!·µê-ext : ‚àÄ {A : Type ‚Ñì} {xs ys : List A}
       ‚Üí (‚àÄ n ‚Üí xs !·µê n Ôºù ys !·µê n)
       ‚Üí xs Ôºù ys
!·µê-ext {xs = []}     {ys = []}     e = refl
!·µê-ext {xs = []}     {ys = y ‚à∑ ys} e = false! (e 0)
!·µê-ext {xs = x ‚à∑ xs} {ys = []}     e = false! (e 0)
!·µê-ext {xs = x ‚à∑ xs} {ys = y ‚à∑ ys} e =
  ap¬≤ {C = Œª x xs ‚Üí List _} _‚à∑_
     (just-inj $ e 0)
     (!·µê-ext (e ‚àò suc))

-- snoc

snoc-append : (xs : List A) {x : A} ‚Üí xs ‚à∑r x Ôºù xs ++ x ‚à∑ []
snoc-append []       = refl
snoc-append (y ‚à∑ xs) = ap (y ‚à∑_) (snoc-append xs)

++-snoc : (xs ys : List A) (y : A) ‚Üí xs ‚à∑r y ++ ys Ôºù xs ++ y ‚à∑ ys
++-snoc []       ys y = refl
++-snoc (x ‚à∑ xs) ys y = ap (x ‚à∑_) (++-snoc xs ys y)

snoc-++ : (xs ys : List A) (y : A) ‚Üí (xs ++ ys) ‚à∑r y Ôºù xs ++ ys ‚à∑r y
snoc-++ []       ys y = refl
snoc-++ (x ‚à∑ xs) ys y = ap (x ‚à∑_) (snoc-++ xs ys y)

snoc-elim : (P : List A ‚Üí ùí∞ ‚Ñì‚Ä≤)
          ‚Üí P []
          ‚Üí (‚àÄ xs x ‚Üí P xs ‚Üí P (xs ‚à∑r x))
          ‚Üí ‚àÄ xs ‚Üí P xs
snoc-elim P p[] ps xs = go [] xs p[]
  where
  go : ‚àÄ xs ys ‚Üí P xs ‚Üí P (xs ++ ys)
  go xs []       pxs = subst P (sym $ ++-id-r xs) pxs
  go xs (y ‚à∑ ys) pxs = subst P (++-snoc xs ys y) (go (snoc xs y) ys (ps xs y pxs))

snoc-length : (xs : List A) {x : A} ‚Üí length (xs ‚à∑r x) Ôºù suc (length xs)
snoc-length xs {x} = ap length (snoc-append xs) ‚àô ++-length xs (x ‚à∑ []) ‚àô +-comm (length xs) 1

snoc-inj : {xs ys : List A} {z w : A} ‚Üí xs ‚à∑r z Ôºù ys ‚à∑r w ‚Üí (xs Ôºù ys) √ó (z Ôºù w)
snoc-inj {xs = []}     {ys = []}     e = refl , (‚à∑-head-inj e)
snoc-inj {xs = []}     {ys = y ‚à∑ ys} e = false! ‚¶É Reflects-List-‚â†-tail ‚¶Ñ e
snoc-inj {xs = x ‚à∑ xs} {ys = []}     e = false! ‚¶É Reflects-List-‚â†-tail ‚¶Ñ e
snoc-inj {xs = x ‚à∑ xs} {ys = y ‚à∑ ys} e =
  first (ap¬≤ {C = Œª _ _ ‚Üí List _} _‚à∑_ (‚à∑-head-inj e)) $ snoc-inj (‚à∑-tail-inj e)

all-‚à∑r : {P : Pred A ‚Ñì‚Ä≤} {xs : List A} ‚Üí All P xs ‚Üí P x ‚Üí All P (xs ‚à∑r x)
all-‚à∑r {P} {xs} pxs px =
  subst (Œª s ‚Üí All P s) (snoc-append xs ‚Åª¬π) $
  all-++ pxs (px ‚à∑ [])

‚à∑r-all : {P : Pred A ‚Ñì‚Ä≤} {xs : List A} ‚Üí All P (xs ‚à∑r x) ‚Üí All P xs √ó P x
‚à∑r-all {P} {xs} axss =
  let (axs , px) = all-split {xs = xs} (subst (Œª s ‚Üí All P s) (snoc-append xs) axss) in
  axs , all-head px

any-‚à∑r-init : {P : Pred A ‚Ñì‚Ä≤} {xs : List A} {x : A}
            ‚Üí Any P xs ‚Üí Any P (xs ‚à∑r x)
any-‚à∑r-init {P} {xs} pxs =
  subst (Œª q ‚Üí Any P q) (snoc-append xs ‚Åª¬π) (any-++-l pxs)

any-‚à∑r-last : {P : Pred A ‚Ñì‚Ä≤} {xs : List A} {x : A}
            ‚Üí P x ‚Üí Any P (xs ‚à∑r x)
any-‚à∑r-last {P} {xs} px =
  subst (Œª q ‚Üí Any P q) (snoc-append xs ‚Åª¬π) (any-++-r (here px))

rec-‚à∑r : {z : B} {f : A ‚Üí B ‚Üí B} {xs : List A} {x : A}
       ‚Üí List.rec z f (xs ‚à∑r x) Ôºù List.rec (f x z) f xs
rec-‚à∑r {z} {f} {xs} {x} =
    ap (List.rec z f) (snoc-append xs)
  ‚àô rec-++ z f xs (x ‚à∑ [])

map-‚à∑r : ‚àÄ {A : ùí∞ ‚Ñì} {B : ùí∞ ‚Ñì‚Ä≤} {f : A ‚Üí B} {xs : List A} {x : A}
       ‚Üí map f (xs ‚à∑r x) Ôºù map f xs ‚à∑r f x
map-‚à∑r {f} {xs} {x} =
    ap (map f) (snoc-append xs)
  ‚àô map-++ f xs (x ‚à∑ [])
  ‚àô snoc-append (map f xs) ‚Åª¬π

prefix-‚à∑r-l : Prefix (xs ‚à∑r x) ys ‚Üí Prefix xs ys
prefix-‚à∑r-l {xs} {ys} p =
  prefix-++-l $
  (subst (Œª q ‚Üí Prefix q ys) (snoc-append xs) $
   p)

-- reverse

reverse-++ : ‚àÄ {xs ys : List A}
           ‚Üí reverse (xs ++ ys) Ôºù reverse ys ++ reverse xs
reverse-++ {xs = []}     {ys} = ++-id-r (reverse ys) ‚Åª¬π
reverse-++ {xs = x ‚à∑ xs} {ys} =
    ap (_++ x ‚à∑ []) (reverse-++ {xs = xs})
  ‚àô ++-assoc (reverse ys) (reverse xs) (x ‚à∑ [])

reverse-‚à∑r : ‚àÄ {xs : List A} {x}
           ‚Üí reverse (xs ‚à∑r x) Ôºù x ‚à∑ reverse xs
reverse-‚à∑r {xs} = ap reverse (snoc-append xs) ‚àô reverse-++ {xs = xs}

reverse-inv : ‚àÄ {xs : List A}
            ‚Üí reverse (reverse xs) Ôºù xs
reverse-inv {xs = []}     = refl
reverse-inv {xs = x ‚à∑ xs} =
  reverse-++ {xs = reverse xs} ‚àô ap (x ‚à∑_) (reverse-inv {xs = xs})

reverse-length : ‚àÄ {xs : List A}
               ‚Üí length (reverse xs) Ôºù length xs
reverse-length {xs = []}     = refl
reverse-length {xs = x ‚à∑ xs} =
    ++-length (reverse xs) (x ‚à∑ [])
  ‚àô +-comm (length (reverse xs)) 1
  ‚àô ap suc reverse-length

reverse-‚äÜ : ‚àÄ {xs : List A}
           ‚Üí xs ‚äÜ reverse xs
reverse-‚äÜ {xs = x ‚à∑ xs} (here e)   = any-++-r {xs = reverse xs} (here e)
reverse-‚äÜ {xs = x ‚à∑ xs} (there me) = any-++-l {xs = reverse xs} (reverse-‚äÜ me)

‚äÜ-reverse : ‚àÄ {xs : List A}
           ‚Üí reverse xs ‚äÜ xs
‚äÜ-reverse {xs = x ‚à∑ xs} me with any-split {xs = reverse xs} me
... | inl m = there (‚äÜ-reverse m)
... | inr (here e) = here e

reverse-‚âà : ‚àÄ {xs : List A}
          ‚Üí xs ‚âà reverse xs
reverse-‚âà = reverse-‚äÜ , ‚äÜ-reverse

-- head

head-map : ‚àÄ {A : ùí∞ ‚Ñì} {B : ùí∞ ‚Ñì‚Ä≤} {xs : List A} {z} {f : A ‚Üí B}
         ‚Üí head (f z) (map f xs) Ôºù f (head z xs)
head-map {xs = []}     = refl
head-map {xs = x ‚à∑ xs} = refl

all‚Üíhead : ‚àÄ {xs x} {P : A ‚Üí Type ‚Ñì‚Ä≤}
         ‚Üí P x ‚Üí All P xs ‚Üí P (head x xs)
all‚Üíhead {xs = []}     px  _       = px
all‚Üíhead {xs = x ‚à∑ xs} _  (px ‚à∑ _) = px

-- last

last-snoc : ‚àÄ {xs : List A} {z x}
          ‚Üí last z (xs ‚à∑r x) Ôºù x
last-snoc {xs = []}     = refl
last-snoc {xs = x ‚à∑ xs} = last-snoc {xs = xs}

last-change : ‚àÄ {xs : List A} {z w}
            ‚Üí 0 < length xs
            ‚Üí last z xs Ôºù last w xs
last-change {xs = []}     0<l = false! 0<l
last-change {xs = x ‚à∑ xs} 0<l = refl

last-reverse : ‚àÄ {xs : List A} {z}
             ‚Üí last z (reverse xs) Ôºù head z xs
last-reverse {xs = []}         = refl
last-reverse {xs = x ‚à∑ xs} {z} = ap (last z) (snoc-append (reverse xs) ‚Åª¬π) ‚àô last-snoc {xs = reverse xs}

head-last : ‚àÄ {xs : List A} {z} ‚Üí head (last z xs) xs Ôºù head z xs
head-last {xs = []}     = refl
head-last {xs = x ‚à∑ xs} = refl

head-reverse : ‚àÄ {xs : List A} {z}
             ‚Üí head z (reverse xs) Ôºù last z xs
head-reverse {xs} {z} = last-reverse {xs = reverse xs} ‚Åª¬π ‚àô ap (last z) (reverse-inv {xs = xs})

last-map : {A : ùí∞ ‚Ñì} {B : ùí∞ ‚Ñì‚Ä≤} {f : A ‚Üí B} {xs : List A} {z : A}
         ‚Üí last (f z) (map f xs) Ôºù f (last z xs)
last-map {xs = []}     = refl
last-map {xs = x ‚à∑ xs} = last-map {xs = xs}

last-elim : (P : List A ‚Üí Type ‚Ñì‚Ä≤)
          ‚Üí P []
          ‚Üí (‚àÄ x xs ‚Üí P xs ‚Üí P (xs ‚à∑r x))
          ‚Üí ‚àÄ xs ‚Üí P xs
last-elim P h0 ih xs =
  subst P (++-id-l xs) $
  List.elim (Œª q ‚Üí ‚àÄ w ‚Üí P w ‚Üí P (w ++ q))
            (Œª w ‚Üí subst P (++-id-r w ‚Åª¬π))
            (Œª y ys ihc w ‚Üí
               subst P  (++-assoc w (y ‚à∑ []) ys) ‚àò
               subst (Œª q ‚Üí P (q ++ ys)) (snoc-append w) ‚àò
               ihc (w ‚à∑r y) ‚àò
               ih y w)
           xs [] h0

all‚Üílast : ‚àÄ {xs x} {P : A ‚Üí Type ‚Ñì‚Ä≤}
         ‚Üí P x ‚Üí All P xs ‚Üí P (last x xs)
all‚Üílast {xs = []}     px  _        = px
all‚Üílast {xs = x ‚à∑ xs} _  (px ‚à∑ ax) = all‚Üílast px ax

-- fold-l

foldl-rev : (z : B) (f : B ‚Üí A ‚Üí B) (xs : List A)
           ‚Üí fold-l f z (reverse xs) Ôºù List.rec z (flip f) xs
foldl-rev z f xs =
  snoc-elim (Œª q ‚Üí ‚àÄ z‚Ä≤ ‚Üí fold-l f z‚Ä≤ (reverse q) Ôºù List.rec z‚Ä≤ (flip f) q)
    (Œª _ ‚Üí refl)
    (Œª xs x ih z‚Ä≤ ‚Üí   ap (fold-l f z‚Ä≤) (reverse-‚à∑r {xs = xs})
                    ‚àô ih (f z‚Ä≤ x)
                    ‚àô rec-++ z‚Ä≤ (flip f) xs (x ‚à∑ []) ‚Åª¬π
                    ‚àô ap (List.rec z‚Ä≤ (flip f)) (snoc-append xs ‚Åª¬π))
     xs z

foldl-++ : (z : B) (f : B ‚Üí A ‚Üí B) (xs ys : List A)
         ‚Üí fold-l f z (xs ++ ys) Ôºù fold-l f (fold-l f z xs) ys
foldl-++ z f xs ys =
    ap (fold-l f z) (reverse-inv {xs = xs ++ ys} ‚Åª¬π)
  ‚àô foldl-rev z f (reverse (xs ++ ys))
  ‚àô ap (List.rec z (flip f)) (reverse-++ {xs = xs})
  ‚àô rec-++ z (flip f) (reverse ys) (reverse xs)
  ‚àô foldl-rev (List.rec z (Œª b a ‚Üí f a b) (reverse xs)) f (reverse ys) ‚Åª¬π
  ‚àô ap (fold-l f (List.rec z (flip f) (reverse xs))) (reverse-inv {xs = ys})
  ‚àô ap (Œª q ‚Üí fold-l f q ys) (foldl-rev z f (reverse xs) ‚Åª¬π ‚àô ap (fold-l f z) (reverse-inv {xs = xs}))

foldl-‚à∑r : (z : B) (f : B ‚Üí A ‚Üí B) (xs : List A) (x : A)
         ‚Üí fold-l f z (xs ‚à∑r x) Ôºù f (fold-l f z xs) x
foldl-‚à∑r z f xs x = ap (fold-l f z) (snoc-append xs) ‚àô foldl-++ z f xs (x ‚à∑ [])

-- reverse-fast

reverse=reverse-fast : (xs : List A) ‚Üí reverse xs Ôºù reverse-fast xs
reverse=reverse-fast =
  snoc-elim (Œª q ‚Üí reverse q Ôºù reverse-fast q)
    refl
    (Œª xs x ih ‚Üí reverse-‚à∑r {xs = xs} ‚àô ap (x ‚à∑_) ih ‚àô foldl-‚à∑r [] (Œª b a ‚Üí a ‚à∑ b) xs x ‚Åª¬π)

-- all

all?-++ : ‚àÄ {p : A ‚Üí Bool} {xs ys : List A}
        ‚Üí all p (xs ++ ys) Ôºù all p xs and all p ys
all?-++     {xs = []}          = refl
all?-++ {p} {xs = x ‚à∑ xs} {ys} =
    ap (p x and_) (all?-++ {xs = xs})
  ‚àô and-assoc (p x) (all p xs) (all p ys) ‚Åª¬π

all?-map : ‚àÄ {A : Type ‚Ñì} {B : Type ‚Ñì‚Ä≤}
             {p : B ‚Üí Bool} {f : A ‚Üí B} {xs : List A}
         ‚Üí all p (map f xs) Ôºù all (p ‚àò f) xs
all?-map {p} {f} {xs} =
  ap (List.rec true _and_)
     (happly (map-pres-comp ‚Åª¬π) xs)

all?-or : ‚àÄ {b} {p : A ‚Üí Bool} {xs : List A}
        ‚Üí all (Œª x ‚Üí b or p x) xs Ôºù b or all p xs
all?-or {b}     {xs = []}     = or-absorb-r b ‚Åª¬π
all?-or {b} {p} {xs = x ‚à∑ xs} =
    ap ((b or p x) and_) (all?-or {p = p} {xs = xs})
  ‚àô or-distrib-and-l b (p x) (all p xs) ‚Åª¬π

not-all? : ‚àÄ {p : A ‚Üí Bool} {xs : List A}
        ‚Üí not (all p xs) Ôºù any (not ‚àò p) xs
not-all?     {xs = []}     = refl
not-all? {p} {xs = x ‚à∑ xs} =
    not-and (p x) _
  ‚àô ap (not (p x) or_) (not-all? {xs = xs})

-- any

any?-++ : ‚àÄ {p : A ‚Üí Bool} {xs ys : List A}
        ‚Üí any p (xs ++ ys) Ôºù any p xs or any p ys
any?-++ {xs = []} = refl
any?-++ {p} {xs = x ‚à∑ xs} {ys} =
    ap (p x or_) (any?-++ {xs = xs})
  ‚àô or-assoc (p x) (any p xs) (any p ys) ‚Åª¬π

not-any? : ‚àÄ {p : A ‚Üí Bool} {xs : List A}
        ‚Üí not (any p xs) Ôºù all (not ‚àò p) xs
not-any?     {xs = []}     = refl
not-any? {p} {xs = x ‚à∑ xs} =
    not-or (p x) _
  ‚àô ap (not (p x) and_) (not-any? {xs = xs})

--TODO move these 2 somewhere
¬¨Any‚ÜíAll¬¨ : {xs : List A} {P : A ‚Üí ùí∞ ‚Ñì‚Ä≤}
          ‚Üí ¬¨ Any P xs ‚Üí All (Œª x ‚Üí ¬¨ (P x)) xs
¬¨Any‚ÜíAll¬¨ {xs = []}     na = []
¬¨Any‚ÜíAll¬¨ {xs = x ‚à∑ xs} na = contra here na ‚à∑ ¬¨Any‚ÜíAll¬¨ (contra there na)

Any¬¨‚Üí¬¨All : {xs : List A} {P : A ‚Üí ùí∞ ‚Ñì‚Ä≤}
          ‚Üí Any (Œª x ‚Üí ¬¨ (P x)) xs ‚Üí ¬¨ All P xs
Any¬¨‚Üí¬¨All {xs = x ‚à∑ xs} (here npx) (px ‚à∑ a) = npx px
Any¬¨‚Üí¬¨All {xs = x ‚à∑ xs} (there an) (px ‚à∑ a) = Any¬¨‚Üí¬¨All an a

-- replicate

length-replicate : length (replicate n z) Ôºù n
length-replicate {n = zero}  = refl
length-replicate {n = suc n} = ap suc (length-replicate {n = n})

replicate-+ : replicate (n + m) z Ôºù replicate n z ++ replicate m z
replicate-+ {n = zero}      = refl
replicate-+ {n = suc n} {z} = ap (z ‚à∑_) (replicate-+ {n = n})

replicate-snoc : replicate (suc n) z Ôºù snoc (replicate n z) z
replicate-snoc {n} {z} = ap (Œª q ‚Üí replicate q z) (+-comm 1 n) ‚àô replicate-+ {m = 1} ‚àô snoc-append _ ‚Åª¬π

replicate-all : (n : ‚Ñï)
              ‚Üí All (_Ôºù z) (replicate n z)
replicate-all  zero   = []
replicate-all (suc n) = refl ‚à∑ replicate-all n

All-replicate : (xs : List A)
              ‚Üí All (_Ôºù z) xs
              ‚Üí xs Ôºù replicate (length xs) z
All-replicate     []       []       = refl
All-replicate {z} (x ‚à∑ xs) (xa ‚à∑ a) = ap¬≤ List._‚à∑_ xa (All-replicate xs a)


-- filter

filter-false : (xs : List A)
             ‚Üí filter (Œª _ ‚Üí false) xs Ôºù []
filter-false []       = refl
filter-false (x ‚à∑ xs) = filter-false xs

filter-true : (xs : List A)
             ‚Üí filter (Œª _ ‚Üí true) xs Ôºù xs
filter-true []       = refl
filter-true (x ‚à∑ xs) = ap (x ‚à∑_) (filter-true xs)

filter-++ : ‚àÄ {p : A ‚Üí Bool} (xs : List A) {ys}
          ‚Üí filter p (xs ++ ys) Ôºù filter p xs ++ filter p ys
filter-++     [] = refl
filter-++ {p} (x ‚à∑ xs) with p x
... | true  = ap (x ‚à∑_) (filter-++ xs)
... | false = filter-++ xs

-- TODO generalize to subsets
all‚Üífilter : {P : A ‚Üí ùí∞ ‚Ñì‚Ä≤} {p : A ‚Üí Bool} {xs : List A}
           ‚Üí All P xs ‚Üí All P (filter p xs)
all‚Üífilter         {xs = []}     []       = []
all‚Üífilter {P} {p} {xs = x ‚à∑ xs} (px ‚à∑ a) with p x
... | true  = px ‚à∑ all‚Üífilter a
... | false = all‚Üífilter a

all-filter : {p : A ‚Üí Bool} {xs : List A}
           ‚Üí ‚åû all p (filter p xs) ‚åü
all-filter {p} {xs = []}     = Oh
all-filter {p} {xs = x ‚à∑ xs} =
  Bool.elim
    {P = Œª q ‚Üí p x Ôºù q ‚Üí ‚åû all p (if q then x ‚à∑ filter p xs else filter p xs) ‚åü}
    (Œª e ‚Üí (so‚âÉis-true ‚Åª¬π $ e) √ó all-filter {xs = xs})
    (Œª _ ‚Üí all-filter {xs = xs})
    (p x) refl

filter-all : {p : A ‚Üí Bool} {xs : List A}
           ‚Üí ‚åû all p xs ‚åü ‚Üí filter p xs Ôºù xs
filter-all {p = p} {xs = []}     _ = refl
filter-all {p = p} {xs = x ‚à∑ xs} s =
  let pax = and-so-‚âÉ {x = p x} $ s in
  subst (Œª q ‚Üí (if q then x ‚à∑ filter p xs else filter p xs) Ôºù x ‚à∑ xs) ((so‚âÉis-true $ pax .fst) ‚Åª¬π) $
  ap (x ‚à∑_) (filter-all (pax .snd))

Reflects-filter-all : {p : A ‚Üí Bool} {xs : List A}
                    ‚Üí Reflects (filter p xs Ôºù xs) (all p xs)
Reflects-filter-all {p} {xs} =
  Reflects.dmap filter-all
    (contra Œª e ‚Üí subst (So ‚àò all p) e (all-filter {xs = xs}))
    Reflects-So

filter-has-eq : {p1 p2 : A ‚Üí Bool} {xs : List A}
             ‚Üí (‚àÄ x ‚Üí x ‚àà xs ‚Üí p1 x Ôºù p2 x)
             ‚Üí filter p1 xs Ôºù filter p2 xs
filter-has-eq {xs = []}     eqp = refl
filter-has-eq {xs = x ‚à∑ xs} eqp =
  ap¬≤ (Œª a b ‚Üí if a then x ‚à∑ b else b)
      (eqp x (here refl))
      (filter-has-eq {xs = xs} Œª q hq ‚Üí eqp q (there hq))

‚àà-filter : ‚àÄ {p} {z : A} {xs}
          ‚Üí ‚åû p z ‚åü ‚Üí z ‚àà xs
          ‚Üí z ‚àà filter p xs
‚àà-filter {p} {xs = x ‚à∑ xs} pz ixs with p x | recall p x
‚àà-filter                   pz (here e)    | true  | _      = here e
‚àà-filter                   pz (there ixs) | true  | _      =
  there (‚àà-filter pz ixs)
‚àà-filter {p}               pz (here e)    | false | ‚ü™ eq ‚ü´ =
  false! $ (so‚âÉis-true $ pz) ‚Åª¬π ‚àô ap p e ‚àô eq
‚àà-filter                   pz (there ixs) | false | _      =
  ‚àà-filter pz ixs

filter-‚àà : ‚àÄ {p} {z : A} {xs}
          ‚Üí z ‚àà filter p xs
          ‚Üí ‚åû p z ‚åü √ó z ‚àà xs
filter-‚àà     {xs = []}     pf = false! pf
filter-‚àà {p} {xs = x ‚à∑ xs} pf with p x | recall p x
filter-‚àà {p} {xs = x ‚à∑ xs} pf         | false | ‚ü™ eq ‚ü´ =
  second there (filter-‚àà {xs = xs} pf)
filter-‚àà {p} {xs = x ‚à∑ xs} (here e)   | true | ‚ü™ eq ‚ü´ =
  (so‚âÉis-true ‚Åª¬π $ ap p e ‚àô eq) , here e
filter-‚àà {p} {xs = x ‚à∑ xs} (there pf) | true | ‚ü™ eq ‚ü´ =
  second there (filter-‚àà {xs = xs} pf)

filter-and : ‚àÄ {p1 p2 : A ‚Üí Bool} {xs}
           ‚Üí filter (Œª q ‚Üí p1 q and p2 q) xs Ôºù filter p1 (filter p2 xs)
filter-and           {xs = []}     = refl
filter-and {p1} {p2} {xs = x ‚à∑ xs} with p2 x
... | true  = ap¬≤ (Œª a b ‚Üí if a then x ‚à∑ b else b) (and-id-r (p1 x)) (filter-and {xs = xs})
... | false = if-false (subst (So ‚àò not) (and-absorb-r (p1 x) ‚Åª¬π) oh) ‚àô filter-and {xs = xs}

filter-comm : ‚àÄ {p1 p2 : A ‚Üí Bool} {xs}
           ‚Üí filter p1 (filter p2 xs) Ôºù filter p2 (filter p1 xs)
filter-comm {p1} {p2} {xs} =
    filter-and {xs = xs} ‚Åª¬π
  ‚àô ap (Œª q ‚Üí filter q xs) (fun-ext Œª q ‚Üí and-comm (p1 q) (p2 q))
  ‚àô filter-and {xs = xs}

filter-OPE : {p : A ‚Üí Bool} {xs : List A}
           ‚Üí OPE (filter p xs) xs
filter-OPE     {xs = []}     = odone
filter-OPE {p} {xs = x ‚à∑ xs} with p x
... | true  = otake refl filter-OPE
... | false = odrop filter-OPE

{-
filter-size-neg : {p : A ‚Üí Bool} {s : List A} {z : A}
                ‚Üí ‚åû not (p z) ‚åü ‚Üí z ‚àà s ‚Üí length (filter p s) < length s
filter-size-neg {s = x ‚à∑ s} npz (here e) = {!!}
filter-size-neg {s = x ‚à∑ s} npz (there zin) = {!!}
-}

-- count

count-++ : ‚àÄ (p : A ‚Üí Bool) xs ys
         ‚Üí count p (xs ++ ys) Ôºù count p xs + count p ys
count-++ p []       ys = refl
count-++ p (x ‚à∑ xs) ys =
    ap (bit (p x) +_) (count-++ p xs ys)
  ‚àô +-assoc (bit (p x)) (count p xs) (count p ys)

Reflects-0<count : ‚àÄ (p : A ‚Üí Bool) xs
                 ‚Üí Reflects (0 < count p xs) (any p xs)
Reflects-0<count p []       = of‚Åø false!
Reflects-0<count p (x ‚à∑ xs) with p x
... | false = Reflects-0<count p xs
... | true  = of ∏ z<s

length-filter : ‚àÄ (p : A ‚Üí Bool) xs
              ‚Üí length (filter p xs) Ôºù count p xs
length-filter p []       = refl
length-filter p (x ‚à∑ xs) with p x
... | false = length-filter p xs
... | true  = ap suc (length-filter p xs)

count‚â§length : ‚àÄ (p : A ‚Üí Bool) xs
             ‚Üí count p xs ‚â§ length xs
count‚â§length p []       = z‚â§
count‚â§length p (x ‚à∑ xs) with p x
... | false = ‚â§-suc-r (count‚â§length p xs)
... | true  = s‚â§s (count‚â§length p xs)

count‚Üíall : ‚àÄ (p : A ‚Üí Bool) xs
          ‚Üí count p xs Ôºù length xs ‚Üí All (So ‚àò p) xs
count‚Üíall p []       e = []
count‚Üíall p (x ‚à∑ xs) e with p x | recall p x
... | false | ‚ü™ eq ‚ü´ = absurd (suc‚â∞id $ subst (_‚â§ length xs) e $ count‚â§length p xs)
... | true  | ‚ü™ eq ‚ü´ = (so‚âÉis-true ‚Åª¬π $ eq) ‚à∑ count‚Üíall p xs (suc-inj e)

count<length : ‚àÄ (p : A ‚Üí Bool) xs
             ‚Üí Any (So ‚àò not ‚àò p) xs
             ‚Üí count p xs < length xs
count<length p xs an =
  ‚â§‚Üí<‚äé= (count‚â§length p xs) &
  [ id
  , (Œª e ‚Üí absurd (Any¬¨‚Üí¬¨All (any-map so-not an) (count‚Üíall p xs e))) ]·µ§

all‚Üícount : ‚àÄ (p : A ‚Üí Bool) xs
          ‚Üí All (So ‚àò p) xs ‚Üí count p xs Ôºù length xs
all‚Üícount p []       []       = refl
all‚Üícount p (x ‚à∑ xs) (px ‚à∑ a) =
  subst (Œª q ‚Üí bit q + count p xs Ôºù suc (length xs))
        ((so‚âÉis-true $ px) ‚Åª¬π)
        (ap suc (all‚Üícount p xs a))

count-union-inter : ‚àÄ p1 p2 (xs : List A)
                  ‚Üí count (Œª x ‚Üí p1 x or p2 x) xs + count (Œª x ‚Üí p1 x and p2 x) xs Ôºù count p1 xs + count p2 xs
count-union-inter p1 p2 []       = refl
count-union-inter p1 p2 (x ‚à∑ xs) =
    +-interchange (bit (p1 x or p2 x)) (count (Œª x ‚Üí p1 x or p2 x) xs) (bit (p1 x and p2 x)) (count (Œª x ‚Üí p1 x and p2 x) xs)
  ‚àô ap (bit (p1 x or p2 x) + bit (p1 x and p2 x) +_) (count-union-inter p1 p2 xs)
  ‚àô ap (_+ (count p1 xs + count p2 xs))
       (Bool.elim
          {P = Œª q ‚Üí bit (q or p2 x) + bit (q and p2 x)
                   Ôºù bit q + bit (p2 x)}
          refl
          (+-zero-r (bit (p2 x)))
          (p1 x))
  ‚àô +-interchange (bit (p1 x)) (count p1 xs) (bit (p2 x)) (count p2 xs) ‚Åª¬π

count-false : (xs : List A)
            ‚Üí count (Œª _ ‚Üí false) xs Ôºù 0
count-false xs = length-filter (Œª _ ‚Üí false) xs ‚Åª¬π ‚àô ap length (filter-false xs)

count-true : (xs : List A)
           ‚Üí count (Œª _ ‚Üí true) xs Ôºù length xs
count-true xs = length-filter (Œª _ ‚Üí true) xs ‚Åª¬π ‚àô ap length (filter-true xs)

-- find

find‚â§length : ‚àÄ (p : A ‚Üí Bool) xs
            ‚Üí count p xs ‚â§ length xs
find‚â§length p [] = z‚â§
find‚â§length p (x ‚à∑ xs) with p x
... | false = ‚â§-suc-r (find‚â§length p xs)
... | true  = s‚â§s (find‚â§length p xs)

-- take & drop

take-nil : take n (the (List A) []) Ôºù []
take-nil {n = zero}  = refl
take-nil {n = suc _} = refl

drop-nil : drop n (the (List A) []) Ôºù []
drop-nil {n = zero}  = refl
drop-nil {n = suc _} = refl

module _ where
  open decminmax ‚Ñï-dec-total
  open decminmaxprops ‚Ñï-dec-total ‚Ñï-dec-total

  length-take : length (take n xs) Ôºù min n (length xs)
  length-take {n = zero}                = refl
  length-take {n = suc n} {xs = []}     = refl
  length-take {n = suc n} {xs = x ‚à∑ xs} = ap suc length-take ‚àô min-ap Suc n (length xs)

length-drop : length (drop n xs) Ôºù length xs ‚à∏ n
length-drop {n = zero}                = refl
length-drop {n = suc n} {xs = []}     = refl
length-drop {n = suc n} {xs = x ‚à∑ xs} = length-drop {n = n}

take-+ : take (n + m) xs Ôºù take n xs ++ take m (drop n xs)
take-+ {n = zero}                = refl
take-+ {n = suc n} {xs = []}     = take-nil ‚Åª¬π
take-+ {n = suc n} {xs = x ‚à∑ xs} = ap (x ‚à∑_) (take-+ {n = n})

drop-+ : drop (n + m) xs Ôºù drop m (drop n xs)
drop-+ {n = zero}                    = refl
drop-+ {n = suc n} {m} {xs = []}     = drop-nil {n = m} ‚Åª¬π
drop-+ {n = suc n}     {xs = x ‚à∑ xs} = drop-+ {n = n}

take-oversize : {n : ‚Ñï} {xs : List A}
              ‚Üí length xs ‚â§ n
              ‚Üí take n xs Ôºù xs
take-oversize {n = zero}                le = length=0‚Üínil (‚â§0‚Üí=0 le) ‚Åª¬π
take-oversize {n = suc n} {xs = []}     le = refl
take-oversize {n = suc n} {xs = x ‚à∑ xs} le = ap (x ‚à∑_) (take-oversize (‚â§-peel le))

drop-oversize : {n : ‚Ñï} {xs : List A}
              ‚Üí length xs ‚â§ n
              ‚Üí drop n xs Ôºù []
drop-oversize {n = zero}                le = length=0‚Üínil (‚â§0‚Üí=0 le)
drop-oversize {n = suc n} {xs = []}     le = refl
drop-oversize {n = suc n} {xs = x ‚à∑ xs} le = drop-oversize (‚â§-peel le)

split-take-drop : (n : ‚Ñï) {xs : List A}
                ‚Üí xs Ôºù take n xs ++ drop n xs
split-take-drop  zero                 = refl
split-take-drop (suc n) {xs = []}     = refl
split-take-drop (suc n) {xs = x ‚à∑ xs} = ap (x ‚à∑_) (split-take-drop n)


-- span

span-append : ‚àÄ (p : A ‚Üí Bool) xs
            ‚Üí let (ys , zs) = span p xs in
              xs Ôºù ys ++ zs
span-append p []       = refl
span-append p (x ‚à∑ xs) with p x
... | true  = ap (x ‚à∑_) (span-append p xs)
... | false = refl

span-length : ‚àÄ (p : A ‚Üí Bool) xs
            ‚Üí let (ys , zs) = span p xs in
              length xs Ôºù length ys + length zs
span-length p xs =
  let (ys , zs) = span p xs in
  ap length (span-append p xs) ‚àô ++-length ys zs

span-all : ‚àÄ (p : A ‚Üí Bool) xs
         ‚Üí All (So ‚àò p) (span p xs .fst)
span-all p []       = []
span-all p (x ‚à∑ xs) with p x | recall p x
... | false | ‚ü™ e ‚ü´ = []
... | true  | ‚ü™ e ‚ü´ = subst So (e ‚Åª¬π) oh ‚à∑ (span-all p xs)


-- zip / zip-with / unzip

zip-with-++ : {f : A ‚Üí B ‚Üí C}
            ‚Üí {as bs : List A} {xs ys : List B}
            ‚Üí length as Ôºù length xs
            ‚Üí zip-with f (as ++ bs) (xs ++ ys) Ôºù zip-with f as xs ++ zip-with f bs ys
zip-with-++     {as = []}     {xs = []}     _ = refl
zip-with-++     {as = []}     {xs = x ‚à∑ xs} e = false! e
zip-with-++     {as = a ‚à∑ as} {xs = []}     e = false! e
zip-with-++ {f} {as = a ‚à∑ as} {xs = x ‚à∑ xs} e = ap (f a x ‚à∑_) (zip-with-++ (suc-inj e))

-- TODO coalesce decminmax stuff?
module _ where
  open decminmax ‚Ñï-dec-total
  open decminmaxprops ‚Ñï-dec-total ‚Ñï-dec-total

  zip-with-length : ‚àÄ {xs ys} {f : A ‚Üí B ‚Üí C}
                  ‚Üí length (zip-with f xs ys) Ôºù min (length xs) (length ys)
  zip-with-length {xs = []}     {ys = []}     = refl
  zip-with-length {xs = []}     {ys = y ‚à∑ ys} = refl
  zip-with-length {xs = x ‚à∑ xs} {ys = []}     = refl
  zip-with-length {xs = x ‚à∑ xs} {ys = y ‚à∑ ys} =
      ap suc zip-with-length
    ‚àô min-ap Suc (length xs) (length ys)

‚àà-zip-with-l : {A : ùí∞ ‚Ñì} {B : ùí∞ ‚Ñì‚Ä≤}
                {f : A ‚Üí B ‚Üí C} {as : List A} {bs : List B} {a : A}
              ‚Üí length as Ôºù length bs
              ‚Üí a ‚àà as
              ‚Üí Œ£[ b Íûâ B ] (b ‚àà bs) √ó (f a b ‚àà zip-with f as bs)
‚àà-zip-with-l     {as = a ‚à∑ as} {bs = []}     e  a‚àà        = false! e
‚àà-zip-with-l {f} {as = a ‚à∑ as} {bs = b ‚à∑ bs} _ (here ae)   =
  b , here refl , here (ap (Œª q ‚Üí f q b) ae)
‚àà-zip-with-l {f} {as = a ‚à∑ as} {bs = b ‚à∑ bs} e (there a‚àà) =
  let (b , b‚àà , fab‚àà) = ‚àà-zip-with-l {f = f} (suc-inj e) a‚àà in
  b , there b‚àà , there fab‚àà

‚àà-zip-with-r : {A : ùí∞ ‚Ñì} {B : ùí∞ ‚Ñì‚Ä≤}
                {f : A ‚Üí B ‚Üí C} {as : List A} {bs : List B} {b : B}
              ‚Üí length as Ôºù length bs
              ‚Üí b ‚àà bs
              ‚Üí Œ£[ a Íûâ A ] (a ‚àà as) √ó (f a b ‚àà zip-with f as bs)
‚àà-zip-with-r     {as = []}     {bs = b ‚à∑ bs} e  b‚àà        = false! e
‚àà-zip-with-r {f} {as = a ‚à∑ as} {bs = b ‚à∑ bs} e (here be)   =
  a , here refl , here (ap (f a) be)
‚àà-zip-with-r {f} {as = a ‚à∑ as} {bs = b ‚à∑ bs} e (there b‚àà) =
  let (a , a‚àà , fab‚àà) = ‚àà-zip-with-r {f = f} (suc-inj e) b‚àà in
  a , there a‚àà , there fab‚àà

zip-with-‚àà : {A : ùí∞ ‚Ñì} {B : ùí∞ ‚Ñì‚Ä≤}
             {f : A ‚Üí B ‚Üí C} {as : List A} {bs : List B} {c : C}
           ‚Üí c ‚àà zip-with f as bs
           ‚Üí Œ£[ a Íûâ A ] Œ£[ b Íûâ B ] ((a ‚àà as) √ó (b ‚àà bs) √ó (c Ôºù f a b))
zip-with-‚àà {as = []}     {bs = []}     c‚àà         = false! c‚àà
zip-with-‚àà {as = []}     {bs = b ‚à∑ bs} c‚àà         = false! c‚àà
zip-with-‚àà {as = a ‚à∑ as} {bs = []}     c‚àà         = false! c‚àà
zip-with-‚àà {as = a ‚à∑ as} {bs = b ‚à∑ bs} (here ce)  =
  a , b , here refl , here refl , ce
zip-with-‚àà {as = a ‚à∑ as} {bs = b ‚à∑ bs} (there c‚àà) =
  let (a‚Ä≤ , b‚Ä≤ , a‚àà , b‚àà , ce) = zip-with-‚àà {as = as} c‚àà in
  a‚Ä≤ , b‚Ä≤ , there a‚àà , there b‚àà , ce

unzip-zip : {A : ùí∞ ‚Ñì} {B : ùí∞ ‚Ñì‚Ä≤}
            {xs : List A}  {ys : List B}
          ‚Üí length xs Ôºù length ys
          ‚Üí unzip (zip xs ys) Ôºù (xs , ys)
unzip-zip {xs = []}     {ys = []}     e = refl
unzip-zip {xs = []}     {ys = y ‚à∑ ys} e = false! e
unzip-zip {xs = x ‚à∑ xs} {ys = []}     e = false! e
unzip-zip {xs = x ‚à∑ xs} {ys = y ‚à∑ ys} e =
  let xye = √ó-path-inv $ unzip-zip {xs = xs} {ys = ys} (suc-inj e) in
  √ó-path (ap (x ‚à∑_) (xye .fst)) (ap (y ‚à∑_) (xye .snd))

zip-unzip : {A : ùí∞ ‚Ñì} {B : ùí∞ ‚Ñì‚Ä≤}
            {xys : List (A √ó B)}
          ‚Üí let (xs , ys) = unzip xys in
            zip xs ys Ôºù xys
zip-unzip {xys = []}            = refl
zip-unzip {xys = (x , y) ‚à∑ xys} = ap ((x , y) ‚à∑_) (zip-unzip {xys = xys})

-- count-from-to

count-from-to-idem : {n : ‚Ñï}
                   ‚Üí count-from-to n n Ôºù []
count-from-to-idem {n = zero}  = refl
count-from-to-idem {n = suc n} = ap (map suc) (count-from-to-idem {n = n})

count-from-to-suc-l : {m n : ‚Ñï}
                    ‚Üí m < n
                    ‚Üí count-from-to m n Ôºù m ‚à∑ count-from-to (suc m) n
count-from-to-suc-l {m = m}     {n = zero}  m<n = false! m<n
count-from-to-suc-l {m = zero}  {n = suc n} m<n = refl
count-from-to-suc-l {m = suc m} {n = suc n} m<n =
  ap (map suc) (count-from-to-suc-l {m = m} {n = n} (<-peel m<n))

count-from-to-suc-r : {m n : ‚Ñï}
                    ‚Üí m ‚â§ n
                    ‚Üí count-from-to m (suc n) Ôºù count-from-to m n ‚à∑r n
count-from-to-suc-r {m = zero} {n = zero} _ = refl
count-from-to-suc-r {m = suc m} {n = zero} m‚â§n = false! m‚â§n
count-from-to-suc-r {m = zero} {n = suc n} m‚â§n =
  ap (0 ‚à∑_) (ap (map suc) (count-from-to-suc-r {m = 0} {n = n} z‚â§) ‚àô map-‚à∑r)
count-from-to-suc-r {m = suc m} {n = suc n} m‚â§n =
  ap (map suc) (count-from-to-suc-r {m = m} {n = n} (‚â§-peel m‚â§n)) ‚àô map-‚à∑r

-- TODO more arithmetics

count-from-to-len : {m n : ‚Ñï}
                  ‚Üí length (count-from-to m n) Ôºù n ‚à∏ m
count-from-to-len {m = m}     {n = zero}  = ‚à∏-zero-l m ‚Åª¬π
count-from-to-len {m = zero}  {n = suc n} = ap suc (map-length ‚àô count-from-to-len {m = 0} {n = n})
count-from-to-len {m = suc m} {n = suc n} = map-length ‚àô count-from-to-len {m = m} {n = n}

count-from-to-‚àà : {m n k : ‚Ñï}
                  ‚Üí k ‚àà count-from-to m n
                  ‚Üí (m ‚â§ k) √ó (k < n)
count-from-to-‚àà {m = zero} {n = suc n} (here e)   =
  z‚â§ , subst (_< suc n) (e ‚Åª¬π) z<s
count-from-to-‚àà {m = zero} {n = suc n} (there k‚àà) =
  let (l , l‚àà , le) = map-‚ààŒ£ suc k‚àà
      ih< = count-from-to-‚àà l‚àà .snd
    in
  z‚â§ , subst (_< suc n) (le ‚Åª¬π) (s<s ih<)
count-from-to-‚àà {m = suc m} {n = suc n} k‚àà =
  let (l , l‚àà , le) = map-‚ààŒ£ suc k‚àà
      (ih‚â§ , ih<) = count-from-to-‚àà {m = m} {n = n} l‚àà
    in
  subst (Œª q ‚Üí (suc m ‚â§ q) √ó (q < suc n)) (le ‚Åª¬π) $
  (s‚â§s ih‚â§) , (s<s ih<)

‚àà-count-from-to : {m n k : ‚Ñï}
                 ‚Üí m ‚â§ k ‚Üí k < n
                 ‚Üí k ‚àà count-from-to m n
‚àà-count-from-to             {n = zero}              _   k<n = false! k<n
‚àà-count-from-to {m = zero}  {n = suc n} {k = zero}  _   _   = here refl
‚àà-count-from-to {m = zero}  {n = suc n} {k = suc k} _   k<n =
  there (‚àà-map suc (‚àà-count-from-to {m = 0} {n = n} {k = k} z‚â§ (<-peel k<n)))
‚àà-count-from-to {m = suc m} {n = suc n} {k = zero}  m‚â§k _   = false! m‚â§k
‚àà-count-from-to {m = suc m} {n = suc n} {k = suc k} m‚â§k k<n =
  ‚àà-map suc (‚àà-count-from-to {m = m} {n = n} {k = k} (‚â§-peel m‚â§k) (<-peel k<n))

-- TODO ‚âÉ
