{-# OPTIONS --safe #-}
module Order.Complemented where

open import Cat.Prelude
open import Order.Base
open import Order.Strict
open import Order.Total
open import Order.Trichotomous
open Variadics _

open import Data.Dec
open import Data.Sum

private variable
  ‚Ñì : Level
  A : Type ‚Ñì
  x y z : A

record ComplementedPoset o ‚Ñì : ùí∞ (‚Ñìsuc (o ‚äî ‚Ñì)) where
  no-eta-equality
  infix 4.5 _‚â§_ _<_
  field
    Ob  : ùí∞ o
    _‚â§_ : Ob ‚Üí Ob ‚Üí ùí∞ ‚Ñì
    _<_ : Ob ‚Üí Ob ‚Üí ùí∞ ‚Ñì

    ‚â§-thin    : is-prop (x ‚â§ y)
    ‚â§-refl    : x ‚â§ x
    ‚â§-trans   : x ‚â§ y ‚Üí y ‚â§ z ‚Üí x ‚â§ z
    ‚â§-antisym : x ‚â§ y ‚Üí y ‚â§ x ‚Üí x Ôºù y

    <-thin    : is-prop (x < y)
    <-irrefl  : ¬¨ (x < x)
    <-trans   : x < y ‚Üí y < z ‚Üí x < z

    ‚¶É dec-‚â§ ‚¶Ñ : Dec (x ‚â§ y)
    ‚¶É dec-< ‚¶Ñ : Dec (x < y)
    ‚¶É has-discrete ‚¶Ñ : is-discrete Ob

    ‚â§‚âÉ‚âØ : (x ‚â§ y) ‚âÉ (¬¨ y < x)
    <‚âÉ‚â± : (x < y) ‚âÉ (¬¨ y ‚â§ x)

  complemented‚Üíposet : Poset o ‚Ñì
  complemented‚Üíposet .Poset.Ob = Ob
  complemented‚Üíposet .Poset._‚â§_ = _‚â§_
  complemented‚Üíposet .Poset.‚â§-thin = ‚â§-thin
  complemented‚Üíposet .Poset.‚â§-refl = ‚â§-refl
  complemented‚Üíposet .Poset.‚â§-trans = ‚â§-trans
  complemented‚Üíposet .Poset.‚â§-antisym = ‚â§-antisym

  complemented‚Üístrict : StrictPoset o ‚Ñì
  complemented‚Üístrict .StrictPoset.Ob = Ob
  complemented‚Üístrict .StrictPoset._<_ = _<_
  complemented‚Üístrict .StrictPoset.<-thin = <-thin
  complemented‚Üístrict .StrictPoset.<-irrefl = <-irrefl
  complemented‚Üístrict .StrictPoset.<-trans = <-trans

  open Poset complemented‚Üíposet using (ob-is-set; _‚â∞_; _‚â±_; =‚Üí‚â§)
  open StrictPoset complemented‚Üístrict using (<-asym; _‚âÆ_; _‚âØ_; <‚Üí‚â†)

  ‚â§‚Üí‚âØ : ‚àÄ[ _‚â§_ ‚áí _‚âØ_ ]
  ‚â§‚Üí‚âØ {_} {_} = ‚â§‚âÉ‚âØ $_

  ‚âØ‚Üí‚â§ : ‚àÄ[ _‚âØ_ ‚áí _‚â§_ ]
  ‚âØ‚Üí‚â§ {_} {_} = ‚â§‚âÉ‚âØ ‚Åª¬π $_

  <‚Üí‚â± : ‚àÄ[ _<_ ‚áí _‚â±_ ]
  <‚Üí‚â± {_} {_} = <‚âÉ‚â± $_

  ‚â±‚Üí< : ‚àÄ[ _‚â±_ ‚áí _<_ ]
  ‚â±‚Üí< {_} {_} = <‚âÉ‚â± ‚Åª¬π $_

  <‚Üí‚â§ : ‚àÄ[ _<_ ‚áí _‚â§_ ]
  <‚Üí‚â§ {_} {_} = <-asym ‚àô ‚âØ‚Üí‚â§

  <-‚â§-trans : ‚àÄ {x y z} ‚Üí x < y ‚Üí y ‚â§ z ‚Üí x < z
  <-‚â§-trans x<y y‚â§z = ‚â±‚Üí< Œª z‚â§x ‚Üí <‚Üí‚â± x<y (‚â§-trans y‚â§z z‚â§x)

  ‚â§-<-trans : ‚àÄ {x y z} ‚Üí x ‚â§ y ‚Üí y < z ‚Üí x < z
  ‚â§-<-trans x‚â§y y<z = ‚â±‚Üí< Œª z‚â§x ‚Üí <‚Üí‚â± y<z (‚â§-trans z‚â§x x‚â§y)

  has-weak-total-order : is-weak-total-order complemented‚Üíposet
  has-weak-total-order .is-weak-total-order.from-‚â∞ = <‚Üí‚â§ ‚àò‚Çú ‚â±‚Üí<

  has-dec-total-order : is-decidable-total-order complemented‚Üíposet
  has-dec-total-order = weak-total-order‚Üídec-total-order has-weak-total-order

  has-dec-strict-total-order : is-decidable-strict-total-order complemented‚Üístrict
  has-dec-strict-total-order = discrete+dec+connnex‚Üídec-strict-total-order auto auto
    Œª x‚âÆy y‚âÆx ‚Üí ‚â§-antisym (‚âØ‚Üí‚â§ y‚âÆx) (‚âØ‚Üí‚â§ x‚âÆy)

  has-tri-order : is-trichotomous complemented‚Üístrict
  has-tri-order = dec-strict-total-order‚Üítri-order has-dec-strict-total-order

  ‚â§‚Üí<‚äé= : (x ‚â§ y) ‚Üí (x < y) ‚äé (x Ôºù y)
  ‚â§‚Üí<‚äé= {x} {y} x‚â§y with dec-< {x} {y}
  ... | yes x<y = inl x<y
  ... | no  x‚âÆy = inr (‚â§-antisym x‚â§y (‚âØ‚Üí‚â§ x‚âÆy))

  <‚äé=‚Üí‚â§ : (x < y) ‚äé (x Ôºù y) ‚Üí x ‚â§ y
  <‚äé=‚Üí‚â§ = [ <‚Üí‚â§ , =‚Üí‚â§ ]·µ§

  ‚â§‚âÉ<‚äé= : (x ‚â§ y) ‚âÉ (x < y) ‚äé (x Ôºù y)
  ‚â§‚âÉ<‚äé= = prop-ext‚Çë ‚â§-thin
    ((disjoint-‚äé-is-prop <-thin (ob-is-set _ _) (<‚Üí‚â† $‚Çú¬≤_)))
    ‚â§‚Üí<‚äé= <‚äé=‚Üí‚â§

instance
  Underlying-ComplementedPoset : ‚àÄ {o ‚Ñì} ‚Üí Underlying (ComplementedPoset o ‚Ñì)
  Underlying-ComplementedPoset .Underlying.‚Ñì-underlying = _
  Underlying-ComplementedPoset .Underlying.‚åû_‚åü = ComplementedPoset.Ob

module _ {o ‚Ñì} {S : StrictPoset o ‚Ñì} where
  open StrictPoset S

  dec-strict-total-order‚Üícomplemented
    : is-decidable-strict-total-order S
    ‚Üí ComplementedPoset o ‚Ñì
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.Ob = ‚åû S ‚åü
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset._‚â§_ x y = y ‚âÆ x
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset._<_ = _<_
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.‚â§-thin = hlevel!
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.‚â§-refl = <-irrefl
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.‚â§-trans y‚âÆx z‚âÆy z<x = [ z‚âÆy , y‚âÆx ]·µ§ (is-decidable-strict-total-order.<-weak-linear d z<x)
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.‚â§-antisym y‚âÆx x‚âÆy = is-decidable-strict-total-order.<-connex d x‚âÆy y‚âÆx
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.<-thin = <-thin
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.<-irrefl = <-irrefl
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.<-trans = <-trans
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.dec-‚â§ = Dec-¬¨
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.dec-< = auto
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.has-discrete = is-decidable-strict-total-order.has-discrete d
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.‚â§‚âÉ‚âØ = refl
  dec-strict-total-order‚Üícomplemented d .ComplementedPoset.<‚âÉ‚â± = prop-ext‚Çë! (Œª x<y ‚Üí _$ x<y) (dec‚Üíessentially-classical auto)

