{-# OPTIONS --safe #-}
module Order.Semilattice.Join where

open import Cat.Prelude

open import Order.Base
open import Order.Diagram.Bottom
open import Order.Diagram.Join
import Order.Diagram.Join.Reasoning as Joins
import Order.Reasoning

record is-join-semilattice {o โ} (P : Poset o โ) : ๐ฐ (o โ โ) where
  field
    has-bottom : Bottom P
    has-joins  : Has-joins P

  open Bottom has-bottom public
  open Joins P has-joins public

unquoteDecl H-Level-is-join-slat =
  declare-record-hlevel 1 H-Level-is-join-slat (quote is-join-semilattice)

private variable o โ oโฒ โโฒ oโณ โโณ : Level

record
  is-join-slat-hom
    {P : Poset o โ} {Q : Poset oโฒ โโฒ} (f : P โ Q)
    (P-slat : is-join-semilattice P)
    (Q-slat : is-join-semilattice Q) : Type (o โ โโฒ)
  where
  no-eta-equality
  private
    module P = Poset P
    module Pโ = is-join-semilattice P-slat
    module Q = Order.Reasoning Q
    module Qโ = is-join-semilattice Q-slat

  field
    โฅ-โค : f # โฅ Q.โค โฅ
    โช-โค : (x y : P.Ob) โ f # (x โช y) Q.โค f # x โช f # y

  pres-โฅ : f # โฅ ๏ผ โฅ
  pres-โฅ = Q.โค-antisym โฅ-โค Qโ.ยก

  pres-โช : (x y : P.Ob) โ f # (x โช y) ๏ผ (f # x) โช (f # y)
  pres-โช x y = Q.โค-antisym (โช-โค x y) $ Qโ.โช-universal _
    (f # Pโ.lโคโช)
    (f # Pโ.rโคโช)

  pres-bottoms
    : โ {b}
    โ is-bottom P b
    โ is-bottom Q (f # b)
  pres-bottoms {b} b-bot x =
    f # b  ~โจ f # b-bot _ โฉ
    f # โฅ  ~โจ โฅ-โค โฉ
    โฅ      ~โจ Qโ.ยก โฉ
    x      โ

  pres-joins
    : โ {x y m}
    โ is-join P x y m
    โ is-join Q (f # x) (f # y) (f # m)
  pres-joins j .is-join.lโคjoin = f # is-join.lโคjoin j
  pres-joins j .is-join.rโคjoin = f # is-join.rโคjoin j
  pres-joins {x} {y} {m} j .is-join.least lb fxโคlb fyโคlb =
    f # m          ~โจ f # j .is-join.least _ Pโ.lโคโช  Pโ.rโคโช โฉ
    f # (x โช y)    ~โจ โช-โค x y โฉ
    f # x โช f # y  ~โจ Qโ.โช-universal lb fxโคlb fyโคlb โฉ
    lb             โ

unquoteDecl H-Level-is-join-slat-hom =
  declare-record-hlevel 1 H-Level-is-join-slat-hom (quote is-join-slat-hom)

instance
  โ-join-slat
    : โ-notation (ฮฃ[ P ๊ Poset o โ ] is-join-semilattice P) (ฮฃ[ Q ๊ Poset oโฒ โโฒ ] is-join-semilattice Q)
        (๐ฐ (o โ โ โ oโฒ โ โโฒ))
  โ-join-slat .โ-notation.Constraint _ _ = โค
  โ-join-slat ._โ_ (P , jp) (Q , jq) = Total-hom Monotone is-join-slat-hom jp jq

module _ {R : Poset oโณ โโณ} where
  open Order.Reasoning R
  open is-join-slat-hom

  instance
    Refl-join-slat-hom : Refl (is-join-slat-hom {P = R} refl)
    Refl-join-slat-hom .refl .โฅ-โค = refl
    Refl-join-slat-hom .refl .โช-โค _ _ = refl

  module _ {P : Poset o โ} {Q : Poset oโฒ โโฒ} where instance
    Comp-join-slat-hom
      : {f : P โ Q} {g : Q โ R}
      โ Comp (is-join-slat-hom f) (is-join-slat-hom g) (is-join-slat-hom (f โ g))
    Comp-join-slat-hom {g} ._โ_ ฮฑ ฮฒ .โฅ-โค = g # ฮฑ .โฅ-โค โ ฮฒ .โฅ-โค
    Comp-join-slat-hom {f} {g} ._โ_ ฮฑ ฮฒ .โช-โค x y = g # ฮฑ .โช-โค x y โ ฮฒ .โช-โค (f # x) (f # y)
