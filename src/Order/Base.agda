{-# OPTIONS --safe #-}
module Order.Base where

open import Categories.Prelude
import Categories.Morphism

open import Structures.IdentitySystem

private variable n : HLevel

record Poset o ‚Ñì : ùí∞ (‚Ñìsuc (o ‚äî ‚Ñì)) where
  no-eta-equality
  field
    Ob  : ùí∞ o
    _‚â§_ : Ob ‚Üí Ob ‚Üí ùí∞ ‚Ñì
    ‚â§-thin    : ‚àÄ {x y} ‚Üí is-prop (x ‚â§ y)
    ‚â§-refl    : ‚àÄ {x} ‚Üí x ‚â§ x
    ‚â§-trans   : ‚àÄ {x y z} ‚Üí x ‚â§ y ‚Üí y ‚â§ z ‚Üí x ‚â§ z
    ‚â§-antisym : ‚àÄ {x y} ‚Üí x ‚â§ y ‚Üí y ‚â§ x ‚Üí x Ôºù y

  instance
    H-Level-‚â§-prop : ‚àÄ {x y} ‚Üí H-Level (suc n) (x ‚â§ y)
    H-Level-‚â§-prop = hlevel-prop-instance ‚â§-thin

  opaque
    ob-is-set : is-set Ob
    ob-is-set = identity-system‚Üíis-of-hlevel 1
      {r = Œª _ ‚Üí ‚â§-refl , ‚â§-refl}
      (set-identity-system hlevel! (‚â§-antisym $¬≤_))
      hlevel!

    ‚â§-refl‚Ä≤ : ‚àÄ {x y} ‚Üí x Ôºù y ‚Üí x ‚â§ y
    ‚â§-refl‚Ä≤ {x} p = subst (x ‚â§_) p ‚â§-refl

  instance
    H-Level-poset-ob : H-Level (2 + n) Ob
    H-Level-poset-ob = hlevel-basic-instance 2 ob-is-set

unquoteDecl poset-iso = declare-record-iso poset-iso (quote Poset)

private variable
  o o‚Ä≤ ‚Ñì ‚Ñì‚Ä≤ : Level

instance
  Underlying-Poset : Underlying (Poset o ‚Ñì)
  Underlying-Poset .Underlying.‚Ñì-underlying = _
  Underlying-Poset .Underlying.‚åû_‚åü‚Å∞ = Poset.Ob

  proj-hlevel-poset-ob : Struct-proj-desc (quote is-of-hlevel) by-hlevel (quote Poset.Ob) false
  proj-hlevel-poset-ob .Struct-proj-desc.struct-name = quote Poset
  proj-hlevel-poset-ob .Struct-proj-desc.struct-args-length = 2
  proj-hlevel-poset-ob .Struct-proj-desc.goal-projection = quote Poset.ob-is-set
  proj-hlevel-poset-ob .Struct-proj-desc.projection-args-length = 3
  proj-hlevel-poset-ob .Struct-proj-desc.level-selector = inl 2
  proj-hlevel-poset-ob .Struct-proj-desc.carrier-selector = 2

  proj-hlevel-poset-‚â§ : Struct-proj-desc (quote is-of-hlevel) by-hlevel (quote Poset._‚â§_) false
  proj-hlevel-poset-‚â§ .Struct-proj-desc.struct-name = quote Poset
  proj-hlevel-poset-‚â§ .Struct-proj-desc.struct-args-length = 2
  proj-hlevel-poset-‚â§ .Struct-proj-desc.goal-projection = quote Poset.‚â§-thin
  proj-hlevel-poset-‚â§ .Struct-proj-desc.projection-args-length = 5
  proj-hlevel-poset-‚â§ .Struct-proj-desc.level-selector = inl 1
  proj-hlevel-poset-‚â§ .Struct-proj-desc.carrier-selector = 2


record Monotone {o o‚Ä≤ ‚Ñì ‚Ñì‚Ä≤}
  (P : Poset o ‚Ñì) (Q : Poset o‚Ä≤ ‚Ñì‚Ä≤) : ùí∞ (o ‚äî o‚Ä≤ ‚äî ‚Ñì ‚äî ‚Ñì‚Ä≤) where
  no-eta-equality
  private
    module P = Poset P
    module Q = Poset Q
  field
    hom    : P.Ob ‚Üí Q.Ob
    pres-‚â§ : ‚àÄ {x y} ‚Üí x P.‚â§ y ‚Üí hom x Q.‚â§ hom y

open Monotone public

unquoteDecl monotone-iso = declare-record-iso monotone-iso (quote Monotone)

private variable
  P Q R : Poset o ‚Ñì

monotone-is-set : is-set (Monotone P Q)
monotone-is-set {Q} = iso‚Üíis-of-hlevel 2 monotone-iso
  (Œ£-is-of-hlevel 2 hlevel! Œª _ ‚Üí is-prop‚Üíis-set hlevel!)

instance
  H-Level-Monotone : ‚àÄ {n} ‚Üí H-Level (2 + n) (Monotone P Q)
  H-Level-Monotone = hlevel-basic-instance 2 monotone-is-set

  Funlike-Monotone : Funlike (Monotone {o} {o‚Ä≤} {‚Ñì} {‚Ñì‚Ä≤})
  Funlike-Monotone = record { _#_ = hom }

monotone-pathP
  : {P : I ‚Üí Poset o ‚Ñì} {Q : I ‚Üí Poset o‚Ä≤ ‚Ñì‚Ä≤}
  ‚Üí {f : Monotone (P i0) (Q i0)} {g : Monotone (P i1) (Q i1)}
  ‚Üí Ôºú apply f Ôºè (Œª i ‚Üí ‚åû P i ‚åü ‚Üí ‚åû Q i ‚åü) Ôºº apply g Ôºû
  ‚Üí Ôºú f Ôºè (Œª i ‚Üí Monotone (P i) (Q i)) Ôºº g Ôºû
monotone-pathP q i .hom a = q i a
monotone-pathP {P} {Q} {f} {g} q i .Monotone.pres-‚â§ {x} {y} Œ± =
  is-prop‚ÜípathP
    (Œª i ‚Üí Œ†¬≥-is-of-hlevel {A = ‚åû P i ‚åü} {B = Œª _ ‚Üí ‚åû P i ‚åü} {C = Œª x y ‚Üí P i .Poset._‚â§_ x y} 1
      Œª x y _ ‚Üí Q i .Poset.‚â§-thin {q i x} {q i y})
    (Œª _ _ Œ± ‚Üí f .Monotone.pres-‚â§ Œ±)
    (Œª _ _ Œ± ‚Üí g .Monotone.pres-‚â§ Œ±) i x y Œ±

Extensional-Monotone
  : ‚àÄ {‚Ñìr} {P : Poset o ‚Ñì} {Q : Poset o‚Ä≤ ‚Ñì‚Ä≤}
  ‚Üí ‚¶É sa : Extensional (P ‚ÜíÃá Q) ‚Ñìr ‚¶Ñ
  ‚Üí Extensional (Monotone P Q) ‚Ñìr
Extensional-Monotone ‚¶É sa ‚¶Ñ = set-injective‚Üíextensional! monotone-pathP sa

instance
  Extensionality-Monotone : {P : Poset o ‚Ñì} {Q : Poset o‚Ä≤ ‚Ñì‚Ä≤}
                          ‚Üí Extensionality (Monotone P Q)
  Extensionality-Monotone = record { lemma = quote Extensional-Monotone }


id‚Çò : Monotone P P
id‚Çò .hom    x   = x
id‚Çò .pres-‚â§ x‚â§y = x‚â§y

_‚àò‚Çò_ : Monotone Q R ‚Üí Monotone P Q ‚Üí Monotone P R
(f ‚àò‚Çò g) .hom    x   = f # (g # x)
(f ‚àò‚Çò g) .pres-‚â§ x‚â§y = f .pres-‚â§ (g .pres-‚â§ x‚â§y)

Posets : (o ‚Ñì : Level) ‚Üí Precategory (‚Ñìsuc o ‚äî ‚Ñìsuc ‚Ñì) (o ‚äî ‚Ñì)
Posets o ‚Ñì .Precategory.Ob = Poset o ‚Ñì
Posets o ‚Ñì .Precategory.Hom = Monotone
Posets o ‚Ñì .Precategory.Hom-set = hlevel!
Posets o ‚Ñì .Precategory.id  = id‚Çò
Posets o ‚Ñì .Precategory._‚àò_ = _‚àò‚Çò_
Posets o ‚Ñì .Precategory.id-r _ = trivial!
Posets o ‚Ñì .Precategory.id-l _ = trivial!
Posets o ‚Ñì .Precategory.assoc _ _ _ = trivial!

-- TODO add `Reasoning` if needed
module Posets {o ‚Ñì} = Categories.Morphism (Posets o ‚Ñì)

Forget-poset : ‚àÄ {o ‚Ñì} ‚Üí Functor (Posets o ‚Ñì) (Sets o)
Forget-poset .Functor.F‚ÇÄ P = el! ‚åû P ‚åü
Forget-poset .Functor.F‚ÇÅ = hom
Forget-poset .Functor.F-id = refl
Forget-poset .Functor.F-‚àò _ _ = refl

_·µí·µñ·µñ : Poset o ‚Ñì ‚Üí Poset o ‚Ñì
(P ·µí·µñ·µñ) .Poset.Ob = Poset.Ob P
(P ·µí·µñ·µñ) .Poset._‚â§_ = flip (Poset._‚â§_ P)
(P ·µí·µñ·µñ) .Poset.‚â§-thin = Poset.‚â§-thin P
(P ·µí·µñ·µñ) .Poset.‚â§-refl = Poset.‚â§-refl P
(P ·µí·µñ·µñ) .Poset.‚â§-trans = flip (Poset.‚â§-trans P)
(P ·µí·µñ·µñ) .Poset.‚â§-antisym = flip (Poset.‚â§-antisym P)
