{-# OPTIONS --safe #-}
module Order.Constructions.Maybe where

open import Prelude

open import Order.Base
open import Order.Strict
open import Order.Diagram.Bottom
open import Order.Diagram.Join
open import Order.Diagram.Meet

open import Data.Empty hiding (_‚â†_)
open import Data.Maybe
open import Data.Acc

private variable
  o ‚Ñì : Level
  A : ùí∞ o

-- adjoin a bottom : nothing < just

Maybe‚â§ : (A ‚Üí A ‚Üí ùí∞ ‚Ñì)
       ‚Üí  Maybe A ‚Üí Maybe A ‚Üí ùí∞ ‚Ñì
Maybe‚â§ {‚Ñì} le  nothing  y       = ‚ä§
Maybe‚â§     le (just x) (just y) = le x y
Maybe‚â§     le (just x)  nothing = ‚ä•

Maybe‚Çö : Poset o ‚Ñì ‚Üí Poset o ‚Ñì
Maybe‚Çö {‚Ñì} P = po module Maybe‚Çö where
  module P = Poset P

  po : Poset _ _
  po .Poset.Ob = Maybe ‚åû P ‚åü
  po .Poset._‚â§_ = Maybe‚â§ P._‚â§_
  po .Poset.‚â§-thin {x = nothing}              = hlevel 1
  po .Poset.‚â§-thin {x = just x} {y = just y}  = hlevel 1
  po .Poset.‚â§-thin {x = just x} {y = nothing} = hlevel 1
  po .Poset.‚â§-refl {x = nothing} = lift tt
  po .Poset.‚â§-refl {x = just x}  = refl
  po .Poset.‚â§-trans {x = nothing}                          _  _  = lift tt
  po .Poset.‚â§-trans {x = just x} {y = just y} {z = just z} xy yz = xy ‚àô yz
  po .Poset.‚â§-antisym {x = nothing} {y = nothing} _ _ = refl
  po .Poset.‚â§-antisym {x = just x} {y = just y} xy yx = ap just (P.‚â§-antisym xy yx)

instance
  Maybe-bottom : {P : Poset o ‚Ñì} ‚Üí Bottom (Maybe‚Çö P)
  Maybe-bottom .Bottom.bot = nothing
  Maybe-bottom .Bottom.bot-is-bot x = lift tt

module _ {P : Poset o ‚Ñì} where
  Just : P ‚áí Maybe‚Çö P
  Just .hom = just
  Just .pres-‚â§ = id

-- strict

Maybe< : (A ‚Üí A ‚Üí ùí∞ ‚Ñì)
       ‚Üí Maybe A ‚Üí Maybe A ‚Üí ùí∞ ‚Ñì
Maybe< lt  nothing (just y) = ‚ä§
Maybe< lt  nothing  nothing = ‚ä•
Maybe< lt (just x) (just y) = lt x y
Maybe< lt (just x)  nothing = ‚ä•

¬¨<nothing : {lt : A ‚Üí A ‚Üí ùí∞ ‚Ñì}
            {x : Maybe A}
          ‚Üí ¬¨ (Maybe< lt x nothing)
¬¨<nothing {x = just x}  = lower
¬¨<nothing {x = nothing} = lower

Maybe‚Çõ : StrictPoset o ‚Ñì ‚Üí StrictPoset o ‚Ñì
Maybe‚Çõ {‚Ñì} S = spo module Maybe‚Çõ where
  module S = StrictPoset S

  spo : StrictPoset _ _
  spo .StrictPoset.Ob = Maybe ‚åû S ‚åü
  spo .StrictPoset._<_ = Maybe< S._<_
  spo .StrictPoset.<-thin {x = just x}  {y = just y}  = hlevel 1
  spo .StrictPoset.<-thin {x = just x}  {y = nothing} = hlevel 1
  spo .StrictPoset.<-thin {x = nothing} {y = just y}  = hlevel 1
  spo .StrictPoset.<-thin {x = nothing} {y = nothing} = hlevel 1
  spo .StrictPoset.<-irrefl {x = just x} = S.<-irrefl
  spo .StrictPoset.<-irrefl {x = nothing} = lower
  spo .StrictPoset.<-trans {x = just x}  {y = just y} {z = just z} xy yz = xy ‚àô yz
  spo .StrictPoset.<-trans {x = nothing} {y = just y} {z = just z} xy yz = lift tt

-- well-foundedness

Maybe-acc : {lt : A ‚Üí A ‚Üí ùí∞ ‚Ñì}
            {x : A}
          ‚Üí Acc lt x
          ‚Üí Acc (Maybe< lt) (just x)
Maybe-acc (acc rec) = acc Œª where
                              (just y) y< ‚Üí Maybe-acc (rec y y<)
                              nothing y< ‚Üí acc Œª y y< ‚Üí absurd (¬¨<nothing {x = y} y<)

Maybe-wf : {lt : A ‚Üí A ‚Üí ùí∞ ‚Ñì}
         ‚Üí is-wf lt
         ‚Üí is-wf (Maybe< lt)
Maybe-wf wf (just x) = Maybe-acc (wf x)
Maybe-wf wf nothing = acc Œª y y< ‚Üí absurd (¬¨<nothing {x = y} y<)
