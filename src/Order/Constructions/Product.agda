{-# OPTIONS --safe #-}
module Order.Constructions.Product where

open import Cat.Prelude
open import Cat.Diagram.Terminal

open import Order.Base
open import Order.Diagram.Bottom
open import Order.Diagram.Top
open import Order.Diagram.Join
open import Order.Diagram.Meet
open import Order.Diagram.Glb
open import Order.Diagram.Lub
open import Order.Strict
open import Order.Semilattice.Join
open import Order.Semilattice.Meet
open import Order.Lattice

open import Functions.Surjection

private variable o ‚Ñì o‚Ä≤ ‚Ñì‚Ä≤ o‚Ä≥ ‚Ñì‚Ä≥ ‚Ñì·µ¢ ‚Ñì‚±º ‚Ñì‚Çñ : Level

Terminal-Poset : Terminal (Posets o ‚Ñì)
Terminal-Poset .Terminal.top = ‚ä§
Terminal-Poset .Terminal.has-‚ä§ _ .fst .hom = _
Terminal-Poset .Terminal.has-‚ä§ _ .fst .pres-‚â§ = _
Terminal-Poset .Terminal.has-‚ä§ _ .snd _ = trivial!

_√ó‚Çö_ : Poset o ‚Ñì ‚Üí Poset o‚Ä≤ ‚Ñì‚Ä≤ ‚Üí Poset (o ‚äî o‚Ä≤) (‚Ñì ‚äî ‚Ñì‚Ä≤)
P √ó‚Çö Q = po module √ó‚Çö where
  module P = Poset P
  module Q = Poset Q

  po : Poset _ _
  po .Poset.Ob = ‚åû P ‚åü √ó ‚åû Q ‚åü
  po .Poset._‚â§_ (x , x‚Ä≤) (y , y‚Ä≤) = (x P.‚â§ y) √ó (x‚Ä≤ Q.‚â§ y‚Ä≤)
  po .Poset.‚â§-thin = hlevel 1
  po .Poset.‚â§-refl = refl , refl
  po .Poset.‚â§-trans (f , f‚Ä≤) (g , g‚Ä≤) = f ‚àô g , f‚Ä≤ ‚àô g‚Ä≤
  po .Poset.‚â§-antisym (p , p‚Ä≤) (q , q‚Ä≤) = ext (P.‚â§-antisym p q , Q.‚â§-antisym p‚Ä≤ q‚Ä≤)
{-# DISPLAY √ó‚Çö.po a b = a √ó‚Çö b #-}

instance
  √ó-Poset : √ó-notation (Poset o ‚Ñì) (Poset o‚Ä≤ ‚Ñì‚Ä≤) _
  √ó-Poset .√ó-notation.Constraint _ _ = ‚ä§
  √ó-Poset ._√ó_ P Q = P √ó‚Çö Q

_√ó‚Çõ_ : StrictPoset o ‚Ñì ‚Üí StrictPoset o‚Ä≤ ‚Ñì‚Ä≤ ‚Üí StrictPoset (o ‚äî o‚Ä≤) (‚Ñì ‚äî ‚Ñì‚Ä≤)
P √ó‚Çõ Q = spo module √ó‚Çõ where
  module P = StrictPoset P
  module Q = StrictPoset Q

  spo : StrictPoset _ _
  spo .StrictPoset.Ob = ‚åû P ‚åü √ó ‚åû Q ‚åü
  spo .StrictPoset._<_ (x , x‚Ä≤) (y , y‚Ä≤) = (x P.< y) √ó (x‚Ä≤ Q.< y‚Ä≤)
  spo .StrictPoset.<-thin = hlevel 1
  spo .StrictPoset.<-irrefl (p‚Ä≤ , _) = P.<-irrefl p‚Ä≤
  spo .StrictPoset.<-trans (p , p‚Ä≤) (q , q‚Ä≤) = p ‚àô q , p‚Ä≤ ‚àô q‚Ä≤
{-# DISPLAY √ó‚Çõ.spo a b = a √ó‚Çõ b #-}

instance
  √ó-StrictPoset : √ó-notation (StrictPoset o ‚Ñì) (StrictPoset o‚Ä≤ ‚Ñì‚Ä≤) _
  √ó-StrictPoset .√ó-notation.Constraint _ _ = ‚ä§
  √ó-StrictPoset ._√ó_ P Q = P √ó‚Çõ Q

module _ {P : Poset o ‚Ñì} {Q : Poset o‚Ä≤ ‚Ñì‚Ä≤} where
  private
    module P = Poset P
    module Q = Poset Q

  Fst : P √ó Q ‚áí P
  Fst .hom = fst
  Fst .pres-‚â§ = fst

  Snd : P √ó Q ‚áí Q
  Snd .hom = snd
  Snd .pres-‚â§ = snd

  Poset‚ü®_,_‚ü© : {R : Poset o‚Ä≥ ‚Ñì‚Ä≥} ‚Üí R ‚áí P ‚Üí R ‚áí Q ‚Üí R ‚áí P √ó Q
  Poset‚ü® F , G ‚ü© .hom = < F .hom , G .hom >
  Poset‚ü® F , G ‚ü© .pres-‚â§ = < F .pres-‚â§ , G .pres-‚â§ >

  module _ {a : ‚åû P ‚åü} {x : ‚åû Q ‚åü} where

    √ó-is-bottom : √ó-notation (is-bottom P a) (is-bottom Q x) (is-bottom (P √ó Q) (a , x))
    √ó-is-bottom .√ó-notation.Constraint _ _ = ‚ä§
    √ó-is-bottom .√ó-notation._√ó_ Œ± Œ≤ (p , q) = Œ± p , Œ≤ q

    √ó-is-top : √ó-notation (is-top P a) (is-top Q x) (is-top (P √ó Q) (a , x))
    √ó-is-top .√ó-notation.Constraint _ _ = ‚ä§
    √ó-is-top .√ó-notation._√ó_ Œ± Œ≤ (p , q) = Œ± p , Œ≤ q

    module _ {b : ‚åû P ‚åü} {y : ‚åû Q ‚åü} where

      module _ {c : ‚åû P ‚åü} {z : ‚åû Q ‚åü } where instance
        √ó-is-join : √ó-notation (is-join P a b c) (is-join Q x y z) (is-join (P √ó Q) (a , x) (b , y) (c , z))
        √ó-is-join .√ó-notation.Constraint _ _ = ‚ä§
        √ó-is-join ._√ó_ lp lq .is-join.l‚â§join = lp .is-join.l‚â§join , lq .is-join.l‚â§join
        √ó-is-join ._√ó_ lp lq .is-join.r‚â§join = lp .is-join.r‚â§join , lq .is-join.r‚â§join
        √ó-is-join ._√ó_ lp lq .is-join.least (ub‚ÇÅ , ub‚ÇÇ) (al , xl) (bl , yl) =
          lp .is-join.least ub‚ÇÅ al bl , lq .is-join.least ub‚ÇÇ xl yl

        √ó-is-meet : √ó-notation (is-meet P a b c) (is-meet Q x y z) (is-meet (P √ó Q) (a , x) (b , y) (c , z))
        √ó-is-meet .√ó-notation.Constraint _ _ = ‚ä§
        √ó-is-meet ._√ó_ lp lq .is-meet.meet‚â§l = lp .is-meet.meet‚â§l , lq .is-meet.meet‚â§l
        √ó-is-meet ._√ó_ lp lq .is-meet.meet‚â§r = lp .is-meet.meet‚â§r , lq .is-meet.meet‚â§r
        √ó-is-meet ._√ó_ lp lq .is-meet.greatest (ub‚ÇÅ , ub‚ÇÇ) (al , xl) (bl , yl) =
          lp .is-meet.greatest ub‚ÇÅ al bl , lq .is-meet.greatest ub‚ÇÇ xl yl

      instance
        √ó-Join : √ó-notation (Join P a b) (Join Q x y) (Join (P √ó Q) (a , x) (b , y))
        √ó-Join .√ó-notation.Constraint _ _ = ‚ä§
        √ó-Join ._√ó_ Œ± Œ≤ .Join.lub      = Œ± .Join.lub , Œ≤ .Join.lub
        √ó-Join ._√ó_ Œ± Œ≤ .Join.has-join = Œ± .Join.has-join √ó Œ≤ .Join.has-join

        √ó-Meet : √ó-notation (Meet P a b) (Meet Q x y) (Meet (P √ó Q) (a , x) (b , y))
        √ó-Meet .√ó-notation.Constraint _ _ = ‚ä§
        √ó-Meet ._√ó_ Œ± Œ≤ .Meet.glb      = Œ± .Meet.glb , Œ≤ .Meet.glb
        √ó-Meet ._√ó_ Œ± Œ≤ .Meet.has-meet = Œ± .Meet.has-meet √ó Œ≤ .Meet.has-meet

  instance
    √ó-Bottom : √ó-notation (Bottom P) (Bottom Q) (Bottom (P √ó Q))
    √ó-Bottom .√ó-notation.Constraint _ _ = ‚ä§
    √ó-Bottom ._√ó_ Œ± Œ≤ .Bottom.bot = Œ± .Bottom.bot , Œ≤ .Bottom.bot
    √ó-Bottom ._√ó_ Œ± Œ≤ .Bottom.bot-is-bot = Œ± .Bottom.bot-is-bot √ó Œ≤ .Bottom.bot-is-bot

    √ó-Top : √ó-notation (Top P) (Top Q) (Top (P √ó Q))
    √ó-Top .√ó-notation.Constraint _ _ = ‚ä§
    √ó-Top ._√ó_ Œ± Œ≤ .Top.top = Œ± .Top.top , Œ≤ .Top.top
    √ó-Top ._√ó_ Œ± Œ≤ .Top.top-is-top = Œ± .Top.top-is-top √ó Œ≤ .Top.top-is-top

    √ó-is-join-semilattice : √ó-notation (is-join-semilattice P) (is-join-semilattice Q) (is-join-semilattice (P √ó Q))
    √ó-is-join-semilattice .√ó-notation.Constraint _ _ = ‚ä§
    √ó-is-join-semilattice .√ó-notation._√ó_ Œ± Œ≤ .is-join-semilattice.has-bottom =
      Œ± .is-join-semilattice.has-bottom √ó Œ≤ .is-join-semilattice.has-bottom
    √ó-is-join-semilattice .√ó-notation._√ó_ Œ± Œ≤ .is-join-semilattice.has-joins =
      Œ± .is-join-semilattice.has-joins √ó Œ≤ .is-join-semilattice.has-joins

    √ó-is-meet-semilattice : √ó-notation (is-meet-semilattice P) (is-meet-semilattice Q) (is-meet-semilattice (P √ó Q))
    √ó-is-meet-semilattice .√ó-notation.Constraint _ _ = ‚ä§
    √ó-is-meet-semilattice .√ó-notation._√ó_ Œ± Œ≤ .is-meet-semilattice.has-top =
      Œ± .is-meet-semilattice.has-top √ó Œ≤ .is-meet-semilattice.has-top
    √ó-is-meet-semilattice .√ó-notation._√ó_ Œ± Œ≤ .is-meet-semilattice.has-meets =
      Œ± .is-meet-semilattice.has-meets √ó Œ≤ .is-meet-semilattice.has-meets

    √ó-is-lattice : √ó-notation (is-lattice P) (is-lattice Q) (is-lattice (P √ó Q))
    √ó-is-lattice .√ó-notation.Constraint _ _ = ‚ä§
    √ó-is-lattice .√ó-notation._√ó_ Œ± Œ≤ .is-lattice.has-join-slat =
      Œ± .is-lattice.has-join-slat √ó Œ≤ .is-lattice.has-join-slat
    √ó-is-lattice .√ó-notation._√ó_ Œ± Œ≤ .is-lattice.has-meet-slat =
      Œ± .is-lattice.has-meet-slat √ó Œ≤ .is-lattice.has-meet-slat

  module _ {I : ùí∞ ‚Ñì·µ¢} {F : I ‚Üí ‚åû P ‚åü} {G : I ‚Üí ‚åû Q ‚åü} where
    module _ {x : ‚åû P ‚åü} {y : ‚åû Q ‚åü} where instance
      √ó-is-lub : √ó-notation (is-lub P F x) (is-lub Q G y) (is-lub (P √ó Q) < F , G > (x , y))
      √ó-is-lub .√ó-notation.Constraint _ _ = ‚ä§
      √ó-is-lub ._√ó_ lp lq .is-lub.fam‚â§lub = < is-lub.fam‚â§lub lp , is-lub.fam‚â§lub lq >
      √ó-is-lub ._√ó_ lp lq .is-lub.least (ubx , uby) =
        < (Œª a i ‚Üí a i .fst) ‚àô lp .is-lub.least ubx , (Œª a i ‚Üí a i .snd) ‚àô lq .is-lub.least uby >

      √ó-is-glb : √ó-notation (is-glb P F x) (is-glb Q G y) (is-glb (P √ó Q) < F , G > (x , y))
      √ó-is-glb .√ó-notation.Constraint _ _ = ‚ä§
      √ó-is-glb ._√ó_ gp gq .is-glb.glb‚â§fam = < gp .is-glb.glb‚â§fam , gq .is-glb.glb‚â§fam >
      √ó-is-glb ._√ó_ gp gq .is-glb.greatest (lbx , lby) =
        < (Œª a i ‚Üí a i .fst) ‚àô gp .is-glb.greatest lbx , (Œª a i ‚Üí a i .snd) ‚àô gq .is-glb.greatest lby >

    instance
      √ó-Lub : √ó-notation (Lub P F) (Lub Q G) (Lub (P √ó Q) < F , G >)
      √ó-Lub .√ó-notation.Constraint _ _ = ‚ä§
      √ó-Lub ._√ó_ Lp Lq .Lub.lub = Lp .Lub.lub , Lq .Lub.lub
      √ó-Lub ._√ó_ Lp Lq .Lub.has-lub = Lp .Lub.has-lub √ó Lq .Lub.has-lub

      √ó-Glb : √ó-notation (Glb P F) (Glb Q G) (Glb (P √ó Q) < F , G >)
      √ó-Glb .√ó-notation.Constraint _ _ = ‚ä§
      √ó-Glb ._√ó_ Gp Gq .Glb.glb     = Gp .Glb.glb , Gq .Glb.glb
      √ó-Glb ._√ó_ Gp Gq .Glb.has-glb = Gp .Glb.has-glb √ó Gq .Glb.has-glb

  module _ {I : ùí∞ ‚Ñì·µ¢} {J : ùí∞ ‚Ñì‚±º} {K : ùí∞ ‚Ñì‚Çñ} {F : J ‚Üí ‚åû P ‚åü} {G : K ‚Üí ‚åû Q ‚åü}
           (f‚ÇÅ : I ‚Ü† J) (f‚ÇÇ : I ‚Ü† K)
           where
    √ó-is-lub-surj : {x : ‚åû P ‚åü} {y : ‚åû Q ‚åü}
                  ‚Üí is-lub P F x
                  ‚Üí is-lub Q G y
                  ‚Üí is-lub (P √ó Q) < f‚ÇÅ #_ ‚àô F , f‚ÇÇ #_ ‚àô G > (x , y)
    √ó-is-lub-surj lp lq .is-lub.fam‚â§lub = < lp .is-lub.fam‚â§lub ‚àò‚Çú f‚ÇÅ #_ , lq .is-lub.fam‚â§lub ‚àò‚Çú f‚ÇÇ #_ >
    √ó-is-lub-surj lp lq .is-lub.least (ubx , uby) f =
        lp .is-lub.least ubx (Œª j ‚Üí case f‚ÇÅ .snd j of Œª j‚ÇÅ e ‚Üí =‚Üí~‚Åª (F # e) ‚àô f j‚ÇÅ .fst)
      , lq .is-lub.least uby (Œª k ‚Üí case f‚ÇÇ .snd k of Œª k‚ÇÅ e ‚Üí =‚Üí~‚Åª (G # e) ‚àô f k‚ÇÅ .snd)

    √ó-Lub-surj : Lub P F
               ‚Üí Lub Q G
               ‚Üí Lub (P √ó Q) < f‚ÇÅ #_ ‚àô F , f‚ÇÇ #_ ‚àô G >
    √ó-Lub-surj Lp Lq .Lub.lub = Lp .Lub.lub , Lq .Lub.lub
    √ó-Lub-surj Lp Lq .Lub.has-lub = √ó-is-lub-surj (Lp .Lub.has-lub) (Lq .Lub.has-lub)

    -- TODO glb-surj
