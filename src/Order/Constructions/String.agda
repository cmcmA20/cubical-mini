{-# OPTIONS --safe #-}
module Order.Constructions.String where

open import Cat.Prelude
open import Order.Base
open import Order.Complemented
open import Order.Constructions.Minmax
open import Order.Diagram.Bottom
open import Order.Diagram.Join
open import Order.Diagram.Meet
open import Order.Diagram.Top
open import Order.Semilattice.Join
open import Order.Strict
open import Order.Total
open import Order.Ordinal
open import Order.Trichotomous

open import Order.Constructions.Lex
open import Order.Constructions.Char

open import Data.List.Base
open import Data.Char.Base
open import Data.Char.Path
open import Data.String.Base
open import Data.String.Path
open import Data.String.Properties

ListChar‚Çö : Poset 0‚Ñì 0‚Ñì
ListChar‚Çö = []‚â§ Char‚Çõ ‚¶É auto ‚¶Ñ

_‚â§str_ : String ‚Üí String ‚Üí ùí∞
x ‚â§str y = ListChar‚Çö .Order.Base.Poset._‚â§_ (string‚Üílist x) (string‚Üílist y)

Str‚Çö : Poset 0‚Ñì 0‚Ñì
Str‚Çö .Poset.Ob = String
Str‚Çö .Poset._‚â§_ = _‚â§str_
Str‚Çö .Poset.‚â§-thin {x} {y} =
  ListChar‚Çö .Order.Base.Poset.‚â§-thin
    {x = string‚Üílist x} {y = string‚Üílist y}
Str‚Çö .Poset.‚â§-refl {x} =
  ListChar‚Çö .Order.Base.Poset.‚â§-refl
    {x = string‚Üílist x}
Str‚Çö .Poset.‚â§-trans {x} {y} {z} =
  ListChar‚Çö .Order.Base.Poset.‚â§-trans
    {x = string‚Üílist x} {y = string‚Üílist y} {z = string‚Üílist z}
Str‚Çö .Poset.‚â§-antisym {x} {y} x‚â§y y‚â§x =
  string‚Üílist-inj $
  ListChar‚Çö .Order.Base.Poset.‚â§-antisym
    {x = string‚Üílist x} {y = string‚Üílist y} x‚â§y y‚â§x

ListChar-dec-total : is-decidable-total-order ListChar‚Çö
ListChar-dec-total = []‚â§-dto Char-dec-strict-total

Str-total : is-total-order Str‚Çö
Str-total .is-total-order.compare x y =
  ListChar-dec-total .Order.Total.is-decidable-total-order.compare (string‚Üílist x) (string‚Üílist y)

Str-dec-total : is-decidable-total-order Str‚Çö
Str-dec-total .is-decidable-total-order.has-is-total = Str-total
Str-dec-total .is-decidable-total-order.dec-‚â§ {x} {y} =
  ListChar-dec-total .Order.Total.is-decidable-total-order.dec-‚â§
    {x = string‚Üílist x} {y = string‚Üílist y}
Str-dec-total .is-decidable-total-order.has-discrete = String-is-discrete

-- TODO generalize to lex
instance
  Str-bottom : Bottom Str‚Çö
  Str-bottom .Bottom.bot = ""
  Str-bottom .Bottom.bot-is-bot _ = lift tt

-- TODO ?
-- ¬¨-Str-top : ¬¨ Top Str‚Çö

module _ where
  open decminmax Str-dec-total

  Str-meets : Has-meets Str‚Çö
  Str-meets = min-meets

  Str-joins : Has-joins Str‚Çö
  Str-joins = max-joins

  Str-join-slat : is-join-semilattice Str‚Çö
  Str-join-slat .is-join-semilattice.has-bottom = Str-bottom
  Str-join-slat .is-join-semilattice.has-joins  = Str-joins

-- strict

ListChar‚Çõ : StrictPoset 0‚Ñì 0‚Ñì
ListChar‚Çõ = []< Char‚Çõ ‚¶É auto ‚¶Ñ

Str‚Çõ : StrictPoset 0‚Ñì 0‚Ñì
Str‚Çõ .StrictPoset.Ob = String
Str‚Çõ .StrictPoset._<_ x y =
  ListChar‚Çõ .Order.Strict.StrictPoset._<_ (string‚Üílist x) (string‚Üílist y)
Str‚Çõ .StrictPoset.<-thin {x} {y} =
  ListChar‚Çõ .Order.Strict.StrictPoset.<-thin
    {x = string‚Üílist x} {y = string‚Üílist y}
Str‚Çõ .StrictPoset.<-irrefl {x} =
  ListChar‚Çõ .Order.Strict.StrictPoset.<-irrefl
    {x = string‚Üílist x}
Str‚Çõ .StrictPoset.<-trans {x} {y} {z} =
  ListChar‚Çõ .Order.Strict.StrictPoset.<-trans
    {x = string‚Üílist x} {y = string‚Üílist y} {z = string‚Üílist z}

ListChar-dec-strict-total : is-decidable-strict-total-order ListChar‚Çõ
ListChar-dec-strict-total = []<-dsto Char-dec-strict-total

Str-strict-total : is-strict-total-order Str‚Çõ
Str-strict-total .is-strict-total-order.<-weak-linear {x} {y} {z} =
  ListChar-dec-strict-total .Order.Total.is-decidable-strict-total-order.<-weak-linear
     {x = string‚Üílist x} {y = string‚Üílist y} {z = string‚Üílist z}
Str-strict-total .is-strict-total-order.<-connex {x} {y} x‚âÆy y‚âÆx =
  string‚Üílist-inj $
  ListChar-dec-strict-total .Order.Total.is-decidable-strict-total-order.<-connex
    {x = string‚Üílist x} {y = string‚Üílist y} x‚âÆy y‚âÆx

Str-dec-strict-total : is-decidable-strict-total-order Str‚Çõ
Str-dec-strict-total .is-decidable-strict-total-order.has-is-strict-total = Str-strict-total
Str-dec-strict-total .is-decidable-strict-total-order.dec-< {x} {y} =
  ListChar-dec-strict-total .Order.Total.is-decidable-strict-total-order.dec-<
    {x = string‚Üílist x} {y = string‚Üílist y}
Str-dec-strict-total .is-decidable-strict-total-order.has-discrete = String-is-discrete

-- interaction

Str-‚â§‚Üí‚âØ : ‚àÄ {x y} ‚Üí Str‚Çö .Poset._‚â§_ x y ‚Üí ¬¨ (Str‚Çõ .StrictPoset._<_ y x)
Str-‚â§‚Üí‚âØ {x} {y} =
  List-lex-‚â§‚Üí‚âØ
    (Œª {x} ‚Üí Char‚Çõ .StrictPoset.<-irrefl {x})
    (Œª {x} {y} {z} ‚Üí Char‚Çõ .StrictPoset.<-trans {x} {y} {z})
    {xs = string‚Üílist x} {ys = string‚Üílist y}

Str-<‚Üí‚â± : ‚àÄ {x y} ‚Üí Str‚Çõ .StrictPoset._<_ x y ‚Üí ¬¨ (Str‚Çö .Poset._‚â§_ y x)
Str-<‚Üí‚â± {x} {y} =
  List-lex-<‚Üí‚â±
    (Œª {x} ‚Üí Char‚Çõ .StrictPoset.<-irrefl {x})
    (Œª {x} {y} {z} ‚Üí Char‚Çõ .StrictPoset.<-trans {x} {y} {z})
    {xs = string‚Üílist x} {ys = string‚Üílist y}

Str·∂ú·µñ : ComplementedPoset 0‚Ñì 0‚Ñì
Str·∂ú·µñ = dec-strict-total-order‚Üícomplemented Str-dec-strict-total

-- TODO hacky
module _ where
  open decminmax (ComplementedPoset.has-dec-total-order Str·∂ú·µñ)

  Str·∂ú·µñ-join-slat : is-join-semilattice (ComplementedPoset.complemented‚Üíposet Str·∂ú·µñ)
  Str·∂ú·µñ-join-slat .is-join-semilattice.has-bottom .Bottom.bot = ""
  Str·∂ú·µñ-join-slat .is-join-semilattice.has-bottom .Bottom.bot-is-bot _ = lower
  Str·∂ú·µñ-join-slat .is-join-semilattice.has-joins  = max-joins
